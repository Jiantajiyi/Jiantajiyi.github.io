<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[修改网络频段以提升网速]]></title>
    <url>%2Fpost%2Fc4ff8bf4.html</url>
    <content type="text"><![CDATA[强制修改频段以获得更好的网路体验，适用于蓝绿大厂和有root权限且为骁龙处理器的手机 写在最前 我们的手机非常的智能，但有时候却达不到我们想要的效果，需要我们去手动的更改，比如，在人数聚集的地方，往往信号显示满格上网却很慢，尤其是在学校宿舍，教学楼这种地方，运营商的基站数量不够，导致为数不多的基站超负荷运行，自然网速很慢。而我们的手机会自动选择附近信号最好的频段进行连接，同一地点大家的手机都选择信号最好的频段连接，自然会超负荷，本教程的思路就是强制手动选择其他的频段进行连接，你们都连接信号最好的频段，其他的频段没人连接，我连接，我网速不快谁网速快。 蓝绿大厂蓝绿大厂的操作相对简单，因为手机已经内置了工具，我们只需要一点小小的帮助找到这个隐藏的工具下载链接的软件链接: moreshortcuts提取码: itm3 安装之后打开软件，点击第一项Activity 搜索lte，点击lte band mode，不同型号略有不同 创建快捷方式，点击确定，如果桌面没有快捷方式，请检查是否给与软件创建桌面快捷方式的权限这里不同型号的手机可能略有不同，有的直接点击就能打开工具而不用创建桌面快捷方式，若能直接打开，请忽略第四步 打开桌面快捷方式 不同型号手机界面不一，有可能是下面这几种，功能都一样。 锁定band根据自己的运营商选择相应的频段，勾选lte的其中一个频段即可.123移不动LTE频段：band 1,3,8,38,39,40,41联不通LTE频段：band 1,3,5,7,41信不过LTE频段：band 1,3,40,41 注意，尽量将GSM的WACDMA全选，不然某些型号可能无法接打电话和收发短信。修改完成之后可以去应用商店下载软件测试一下网速，然后更换不同的频段测试，找到网速最好的频段即可。这里我测试移动b3,b8网速较好，联通b1，b3，电信b1,不同区域情况可能不一样至此 蓝绿大厂教程结束，如果哪里有问题，点击打开QQ聊天 有root权限且为骁龙处理器没有root权限就不用往下看了可以自行搜索如何获取自己手机的root权限切记不用使用那些所谓的root精灵之类的软件 能获取root权限的都是大佬我就不写了，]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[firewall设置]]></title>
    <url>%2Fpost%2F55eac912.html</url>
    <content type="text"><![CDATA[这里写介绍 这里写文章]]></content>
      <categories>
        <category>这里写分类</category>
      </categories>
      <tags>
        <tag>这里写标签</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[raid-廉价磁盘冗余阵列]]></title>
    <url>%2Fpost%2F5d65ed4e.html</url>
    <content type="text"><![CDATA[廉价磁盘冗余阵列（Redundant Array of inexpensive Disks） 准备11块新硬盘[root@server_1 ~]# lsblk1234567891011121314151617NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 30G 0 disk├─sda1 8:1 0 200M 0 part /boot├─sda2 8:2 0 20G 0 part /└─sda3 8:3 0 2G 0 part [SWAP]sdb 8:16 0 10G 0 disksdc 8:32 0 10G 0 disksdd 8:48 0 10G 0 disksde 8:64 0 10G 0 disksdf 8:80 0 10G 0 disksdg 8:96 0 10G 0 disksdh 8:112 0 10G 0 disksdi 8:128 0 10G 0 disksdj 8:144 0 10G 0 disksdk 8:160 0 10G 0 disksdl 8:176 0 10G 0 disksr0 11:0 1 3.8G 0 rom raid0[root@server_1 ~]# mdadm -C /dev/md0 -l 0 -n 2 /dev/sdb /dev/sdc1234567mdadm: /dev/sdb appears to be part of a raid array: level=raid0 devices=0 ctime=Thu Jan 1 08:00:00 1970mdadm: partition table exists on /dev/sdb but will be lost or meaningless after creating arrayContinue creating array? (y/n) ymdadm: Defaulting to version 1.2 metadatamdadm: array /dev/md0 started. [root@server_1 ~]# mdadm -Ds1ARRAY /dev/md0 metadata=1.2 name=server_1:0 UUID=f8119066:89b2c4f4:565a4b39:a537f251 [root@server_1 ~]# mdadm -Ds &gt; /etc/mdadm.conf[root@server_1 ~]# mdadm -D /dev/md012345678910111213141516171819202122232425/dev/md0: Version : 1.2 Creation Time : Sat May 11 18:59:11 2019 Raid Level : raid0 Array Size : 20955136 (19.98 GiB 21.46 GB) Raid Devices : 2 Total Devices : 2 Persistence : Superblock is persistent Update Time : Sat May 11 18:59:11 2019 State : clean Active Devices : 2Working Devices : 2 Failed Devices : 0 Spare Devices : 0 Chunk Size : 512K Name : server_1:0 (local to host server_1) UUID : f8119066:89b2c4f4:565a4b39:a537f251 Events : 0 Number Major Minor RaidDevice State 0 8 16 0 active sync /dev/sdb 1 8 32 1 active sync /dev/sdc [root@server_1 ~]# mkfs.ext4 /dev/md0123456789101112131415161718192021mke2fs 1.42.9 (28-Dec-2013)Filesystem label=OS type: LinuxBlock size=4096 (log=2)Fragment size=4096 (log=2)Stride=128 blocks, Stripe width=256 blocks1310720 inodes, 5238784 blocks261939 blocks (5.00%) reserved for the super userFirst data block=0Maximum filesystem blocks=2153775104160 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000Allocating group tables: doneWriting inode tables: doneCreating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: done [root@server_1 ~]# blkid /dev/md01/dev/md0: UUID=&quot;55d97bfc-48c6-4e24-89e3-0f4ed0168501&quot; TYPE=&quot;ext4&quot; [root@server_1 ~]# mkdir /raid0[root@server_1 ~]# vim /etc/fstab1UUID=55d97bfc-48c6-4e24-89e3-0f4ed0168501 /raid0 ext4 defaults 0 0 [root@server_1 ~]# mount -a[root@server_1 ~]# df -Th12Filesystem Type Size Used Avail Use% Mounted on/dev/md0 ext4 20G 45M 19G 1% /raid0 raid1[root@server_1 ~]# mdadm -C -v /dev/md1 -l 1 -n 2 -x 1 /dev/sdd /dev/sde /dev/sdf123456789mdadm: Note: this array has metadata at the start and may not be suitable as a boot device. If you plan to store &apos;/boot&apos; on this device please ensure that your boot-loader understands md/v1.x metadata, or use --metadata=0.90mdadm: size set to 10477568KContinue creating array? ymdadm: Defaulting to version 1.2 metadatamdadm: array /dev/md1 started. [root@server_1 ~]# mdadm -D /dev/md112345678910111213141516171819202122232425262728/dev/md1: Version : 1.2 Creation Time : Sat May 11 19:12:02 2019 Raid Level : raid1 Array Size : 10477568 (9.99 GiB 10.73 GB) Used Dev Size : 10477568 (9.99 GiB 10.73 GB) Raid Devices : 2 Total Devices : 3 Persistence : Superblock is persistent Update Time : Sat May 11 19:12:24 2019 State : clean, resyncing Active Devices : 2Working Devices : 3 Failed Devices : 0 Spare Devices : 1 Resync Status : 43% complete Name : server_1:1 (local to host server_1) UUID : 362091c4:db92f8c3:53e6a4a0:a9d808d5 Events : 7 Number Major Minor RaidDevice State 0 8 48 0 active sync /dev/sdd 1 8 64 1 active sync /dev/sde 2 8 80 - spare /dev/sdf [root@server_1 ~]# mdadm -Ds12ARRAY /dev/md0 metadata=1.2 name=server_1:0 UUID=f8119066:89b2c4f4:565a4b39:a537f251ARRAY /dev/md1 metadata=1.2 spares=1 name=server_1:1 UUID=362091c4:db92f8c3:53e6a4a0:a9d808d5 [root@server_1 ~]# mdadm -Ds &gt; /etc/mdadm.conf[root@server_1 ~]# mkfs.ext4 /dev/md11234567891011121314151617181920mke2fs 1.42.9 (28-Dec-2013)Filesystem label=OS type: LinuxBlock size=4096 (log=2)Fragment size=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks655360 inodes, 2619392 blocks130969 blocks (5.00%) reserved for the super userFirst data block=0Maximum filesystem blocks=215167795280 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632Allocating group tables: doneWriting inode tables: doneCreating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: done [root@server_1 ~]# mkdir /raid1[root@server_1 ~]# mount /dev/md1 /raid1[root@server_1 ~]# df -Th123Filesystem Type Size Used Avail Use% Mounted on/dev/md0 ext4 20G 45M 19G 1% /raid0/dev/md1 ext4 9.8G 37M 9.2G 1% /raid1 raid5[root@server_1 ~]# mdadm -C -v /dev/md5 -l 5 -n 3 -x 1 -c 32 /dev/sdg /dev/sdh /dev/sdi /dev/sdj12345mdadm: layout defaults to left-symmetricmdadm: layout defaults to left-symmetricmdadm: size set to 10477568Kmdadm: Defaulting to version 1.2 metadatamdadm: array /dev/md5 started. [root@server_1 ~]# mdadm -D /dev/md51234567891011121314151617181920212223242526272829303132/dev/md5: Version : 1.2 Creation Time : Sat May 11 19:18:23 2019 Raid Level : raid5 Array Size : 20955136 (19.98 GiB 21.46 GB) Used Dev Size : 10477568 (9.99 GiB 10.73 GB) Raid Devices : 3 Total Devices : 4 Persistence : Superblock is persistent Update Time : Sat May 11 19:18:40 2019 State : clean, degraded, recovering Active Devices : 2Working Devices : 4 Failed Devices : 0 Spare Devices : 2 Layout : left-symmetric Chunk Size : 32K Rebuild Status : 34% complete Name : server_1:5 (local to host server_1) UUID : 06bcbf33:573ff69a:cfe80b2a:24848ece Events : 6 Number Major Minor RaidDevice State 0 8 96 0 active sync /dev/sdg 1 8 112 1 active sync /dev/sdh 4 8 128 2 spare rebuilding /dev/sdi 3 8 144 - spare /dev/sdj [root@server_1 ~]# mdadm -Dsv123456ARRAY /dev/md0 level=raid0 num-devices=2 metadata=1.2 name=server_1:0 UUID=f8119066:89b2c4f4:565a4b39:a537f251 devices=/dev/sdb,/dev/sdcARRAY /dev/md1 level=raid1 num-devices=2 metadata=1.2 spares=1 name=server_1:1 UUID=362091c4:db92f8c3:53e6a4a0:a9d808d5 devices=/dev/sdd,/dev/sde,/dev/sdfARRAY /dev/md5 level=raid5 num-devices=3 metadata=1.2 spares=2 name=server_1:5 UUID=06bcbf33:573ff69a:cfe80b2a:24848ece devices=/dev/sdg,/dev/sdh,/dev/sdi,/dev/sdj [root@server_1 ~]# mdadm -Dsv &gt; /etc/mdadm.conf[root@server_1 ~]# mkdir /raid5[root@server_1 ~]# mkfs.ext4 /dev/md5123456789101112131415161718192021mke2fs 1.42.9 (28-Dec-2013)Filesystem label=OS type: LinuxBlock size=4096 (log=2)Fragment size=4096 (log=2)Stride=8 blocks, Stripe width=16 blocks1310720 inodes, 5238784 blocks261939 blocks (5.00%) reserved for the super userFirst data block=0Maximum filesystem blocks=2153775104160 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000Allocating group tables: doneWriting inode tables: doneCreating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: done [root@server_1 ~]# mount /dev/md5 /raid5[root@server_1 ~]# df -Th1234Filesystem Type Size Used Avail Use% Mounted on/dev/md0 ext4 20G 45M 19G 1% /raid0/dev/md1 ext4 9.8G 37M 9.2G 1% /raid1/dev/md5 ext4 20G 45M 19G 1% /raid5 raid10准备如下分区[root@server_1 ~]# lsblk /dev/sdk1234567NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsdk 8:160 0 10G 0 disk├─sdk1 8:161 0 1G 0 part├─sdk2 8:162 0 1G 0 part├─sdk3 8:163 0 1G 0 part├─sdk4 8:164 0 1K 0 part└─sdk5 8:165 0 1G 0 part [root@server_1 ~]# mdadm -C -v /dev/md10 -l 10 -n 4 /dev/sdk1 /dev/sdk2 /dev/sdk3 /dev/sdk5123456mdadm: layout defaults to n2mdadm: layout defaults to n2mdadm: chunk size defaults to 512Kmdadm: size set to 1047552Kmdadm: Defaulting to version 1.2 metadatamdadm: array /dev/md10 started. [root@server_1 ~]# cat /proc/mdstat1234567891011121314Personalities : [raid0] [raid1] [raid6] [raid5] [raid4] [raid10]md10 : active raid10 sdk5[3] sdk3[2] sdk2[1] sdk1[0] 2095104 blocks super 1.2 512K chunks 2 near-copies [4/4] [UUUU]md5 : active raid5 sdi[4] sdj[3](S) sdh[1] sdg[0] 20955136 blocks super 1.2 level 5, 32k chunk, algorithm 2 [3/3] [UUU]md1 : active raid1 sdf[2](S) sde[1] sdd[0] 10477568 blocks super 1.2 [2/2] [UU]md0 : active raid0 sdc[1] sdb[0] 20955136 blocks super 1.2 512k chunksunused devices: &lt;none&gt; [root@server_1 ~]# mdadm -Dsv &gt; /etc/mdadm.conf[root@server_1 ~]# mkdir /raid10[root@server_1 ~]# mkfs.ext4 /dev/md101234567891011121314151617181920mke2fs 1.42.9 (28-Dec-2013)Filesystem label=OS type: LinuxBlock size=4096 (log=2)Fragment size=4096 (log=2)Stride=128 blocks, Stripe width=256 blocks131072 inodes, 523776 blocks26188 blocks (5.00%) reserved for the super userFirst data block=0Maximum filesystem blocks=53687091216 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912Allocating group tables: doneWriting inode tables: doneCreating journal (8192 blocks): doneWriting superblocks and filesystem accounting information: done [root@server_1 ~]# mount /dev/md10 /raid10/[root@server_1 ~]# df -Th12345Filesystem Type Size Used Avail Use% Mounted on/dev/md0 ext4 20G 45M 19G 1% /raid0/dev/md1 ext4 9.8G 37M 9.2G 1% /raid1/dev/md5 ext4 20G 45M 19G 1% /raid5/dev/md10 ext4 2.0G 6.0M 1.9G 1% /raid10 删除磁盘中所有raid信息[root@server_1 ~]# umount /raid*[root@server_1 ~]# mdadm -Ss[root@server_1 ~]# rm -rf /etc/mdadm.conf[root@server_1 ~]# mdadm --zero-superblock /dev/sd{b,c,d,e,f,g,h,i,j,k}删除之前添加的开机自动挂载的项[root@server_1 ~]# vim /etc/fstab1UUID=55d97bfc-48c6-4e24-89e3-0f4ed0168501 /raid0 ext4 defaults 0 0]]></content>
      <categories>
        <category>RHCE</category>
      </categories>
      <tags>
        <tag>RHCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LVM-逻辑卷管理]]></title>
    <url>%2Fpost%2Fdd829813.html</url>
    <content type="text"><![CDATA[屏蔽底层磁盘布局，便于动态管理磁盘容量 创建新的swap分区准备一个新的分区，这里我选择/dev/sdb1，并在建立sdb1分区的时候打标签82，最后让内核重新识别新建的分区partprobe[root@server_1 ~]# fdisk -l /dev/sdb123456789Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0xdd460f12 Device Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 82 Linux swap / Solaris [root@server_1 ~]# lsblk /dev/sdb112NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsdb1 8:17 0 2G 0 part 格式化为交换分区[root@server_1 ~]# mkswap /dev/sdb1123mkswap: /dev/sdb1: warning: wiping old swap signature.Setting up swapspace version 1, size = 2097148 KiBno label, UUID=3f1479f0-b83b-4631-b6b4-109f0f482f34 未启用前查看[root@server_1 ~]# swapon -s12Filename Type Size Used Priority/dev/sda3 partition 2047996 0 -1 [root@server_1 ~]# free -m123 total used free shared buff/cache availableMem: 1824 324 1122 9 378 1313Swap: 1999 0 1999 启用交换分区[root@server_1 ~]# swapon /dev/sdb1 启用后查看[root@server_1 ~]# swapon -s123Filename Type Size Used Priority/dev/sda3 partition 2047996 0 -1/dev/sdb1 partition 2097148 0 -2 [root@server_1 ~]# free -m123 total used free shared buff/cache availableMem: 1824 325 1120 9 378 1312Swap: 4047 0 4047 开机自动挂载[root@server_1 ~]# vim /etc/fstab1/dev/sdb1 swap swap defaults 0 0 删除swap分区 关闭swap分区[root@server_1 ~]# swapoff /dev/sdb1 将/dev/sdb1 标签改回83[root@server_1 ~]# fdisk -l /dev/sdb 123456789Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0xdd460f12 Device Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux 删除/etc/fstab增加的内容[root@server_1 ~]# vim /etc/fstab 1/dev/sdb1 swap swap defaults 0 0 LVM-逻辑卷管理给分区打标签，物理卷_PV使用/dev/sdb1 /dev/sdb2 打标签8e[root@server_1 ~]# fdisk -l /dev/sdb12345678910Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0xdd460f12 Device Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 8e Linux LVM/dev/sdb2 4196352 8390655 2097152 8e Linux LVM 创建PV[root@server_1 ~]# pvcreate /dev/sdb1 /dev/sdb212Physical volume &quot;/dev/sdb1&quot; successfully createdPhysical volume &quot;/dev/sdb2&quot; successfully created [root@server_1 ~]# pvdisplay123456789101112131415161718192021--- Physical volume ---PV Name /dev/sdb1VG Name testPV Size 2.00 GiB / not usable 4.00 MiBAllocatable yesPE Size 4.00 MiBTotal PE 511Free PE 511Allocated PE 0PV UUID I5YIQU-fS4b-4Cur-7fkK-PfxI-R80x-r3LIIk--- Physical volume ---PV Name /dev/sdb2VG Name testPV Size 2.00 GiB / not usable 4.00 MiBAllocatable yesPE Size 4.00 MiBTotal PE 511Free PE 511Allocated PE 0PV UUID CeJ8Ye-Lnva-X3Nz-Ffa8-7PJl-626O-15sw2j 将打标签的分区组成卷组_VG[root@server_1 ~]# vgcreate test /dev/sdb1 /dev/sdb21Volume group &quot;test&quot; successfully created [root@server_1 ~]# vgdisplay1234567891011121314151617181920--- Volume group ---VG Name testSystem IDFormat lvm2Metadata Areas 2Metadata Sequence No 1VG Access read/writeVG Status resizableMAX LV 0Cur LV 0Open LV 0Max PV 0Cur PV 2Act PV 2VG Size 3.99 GiBPE Size 4.00 MiBTotal PE 1022Alloc PE / Size 0 / 0Free PE / Size 1022 / 3.99 GiBVG UUID 6evqe0-rXfQ-oaxd-wAcl-37fA-E3xV-PcteLP 从卷组分隔空间组成逻辑卷_LV从卷组test中划分大小为100个PE（PE默认大小４MB）命名为testlv1[root@server_1 ~]# lvcreate -n testlv1 -l 100 /dev/test1Logical volume &quot;testlv1&quot; created. 从卷组test中划分大小为1G 命名为testlv2[root@server_1 ~]# lvcreate -n testlv2 -L 1G /dev/test1Logical volume &quot;testlv2&quot; created. [root@server_1 ~]# lvdisplay123456789101112131415161718192021222324252627282930313233--- Logical volume ---LV Path /dev/test/testlv1LV Name testlv1VG Name testLV UUID RslhqC-IjYT-xSum-zRXn-sCdN-l5YK-CcKS9YLV Write Access read/writeLV Creation host, time server_1, 2019-05-11 16:34:50 +0800LV Status available# open 0LV Size 400.00 MiBCurrent LE 100Segments 1Allocation inheritRead ahead sectors auto- currently set to 8192Block device 253:0--- Logical volume ---LV Path /dev/test/testlv2LV Name testlv2VG Name testLV UUID B8klrN-Kvvj-UWdD-MIdy-hnPo-ewcT-o1QZ3LLV Write Access read/writeLV Creation host, time server_1, 2019-05-11 16:35:49 +0800LV Status available# open 0LV Size 1.00 GiBCurrent LE 256Segments 1Allocation inheritRead ahead sectors auto- currently set to 8192Block device 253:1 格式化并挂载[root@server_1 ~]# mkfs.ext4 /dev/test/testlv11234567891011121314151617181920mke2fs 1.42.9 (28-Dec-2013)Filesystem label=OS type: LinuxBlock size=1024 (log=0)Fragment size=1024 (log=0)Stride=0 blocks, Stripe width=0 blocks102400 inodes, 409600 blocks20480 blocks (5.00%) reserved for the super userFirst data block=1Maximum filesystem blocks=3407872050 block groups8192 blocks per group, 8192 fragments per group2048 inodes per groupSuperblock backups stored on blocks: 8193, 24577, 40961, 57345, 73729, 204801, 221185, 401409Allocating group tables: doneWriting inode tables: doneCreating journal (8192 blocks): doneWriting superblocks and filesystem accounting information: done [root@server_1 ~]# mkdir /testlv1[root@server_1 ~]# mount /dev/test/testlv1 /testlv1/[root@server_1 ~]# df -Th12Filesystem Type Size Used Avail Use% Mounted on/dev/mapper/test-testlv1 ext4 380M 2.3M 354M 1% /testlv1 扩展lv加100个PE[root@server_1 ~]# lvextend -l +100 /dev/test/testlv112Size of logical volume test/testlv1 changed from 400.00 MiB (100 extents) to 800.00 MiB (200 extents).Logical volume testlv1 successfully resized. 加200M[root@server_1 ~]# lvextend -L +200M /dev/test/testlv112Size of logical volume test/testlv1 changed from 800.00 MiB (200 extents) to 1000.00 MiB (250 extents).Logical volume testlv1 successfully resized. 指定大小2G[root@server_1 ~]# lvextend -L 2G /dev/test/testlv112Size of logical volume test/testlv1 changed from 1000.00 MiB (250 extents) to 2.00 GiB (512 extents).Logical volume testlv1 successfully resized. 重新读取[root@server_1 ~]# resize2fs -p /dev/test/testlv11234resize2fs 1.42.9 (28-Dec-2013)Filesystem at /dev/test/testlv1 is mounted on /testlv1; on-line resizing requiredold_desc_blocks = 4, new_desc_blocks = 16The filesystem on /dev/test/testlv1 is now 2097152 blocks long. [root@server_1 ~]# df -Th12Filesystem Type Size Used Avail Use% Mounted on/dev/mapper/test-testlv1 ext4 2.0G 2.9M 1.9G 1% /testlv1 缩减lv减小逻辑卷可能造成数据损坏[root@server_1 ~]# umount /testlv1/[root@server_1 ~]# e2fsck -f /dev/test/testlv11234567e2fsck 1.42.9 (28-Dec-2013)Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary information/dev/test/testlv1: 11/524288 files (0.0% non-contiguous), 77387/2097152 blocks [root@server_1 ~]# resize2fs -p /dev/test/testlv1 1G12345resize2fs 1.42.9 (28-Dec-2013)Resizing the filesystem on /dev/test/testlv1 to 1048576 (1k) blocks.Begin pass 3 (max = 256)Scanning inode table XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXThe filesystem on /dev/test/testlv1 is now 1048576 blocks long. [root@server_1 ~]# lvreduce -L 1G /dev/test/testlv112345 WARNING: Reducing active logical volume to 1.00 GiB THIS MAY DESTROY YOUR DATA (filesystem etc.)Do you really want to reduce testlv1? [y/n]: y Size of logical volume test/testlv1 changed from 2.00 GiB (512 extents) to 1.00 GiB (256 extents). Logical volume testlv1 successfully resized. [root@server_1 ~]# mount /dev/test/testlv1 /testlv1/[root@server_1 ~]# df -Th12Filesystem Type Size Used Avail Use% Mounted on/dev/mapper/test-testlv1 ext4 984M 2.8M 934M 1% /testlv1 移除逻辑卷[root@server_1 ~]# umount /testlv1/[root@server_1 ~]# lvremove /dev/test/testlv112Do you really want to remove active logical volume testlv1? [y/n]: y Logical volume &quot;testlv1&quot; successfully removed [root@server_1 ~]# vgremove test1234Do you really want to remove volume group &quot;test&quot; containing 1 logical volumes? [y/n]: yDo you really want to remove active logical volume testlv2? [y/n]: y Logical volume &quot;testlv2&quot; successfully removed Volume group &quot;test&quot; successfully removed [root@server_1 ~]# pvremove /dev/sdb1 /dev/sdb212Labels on physical volume &quot;/dev/sdb1&quot; successfully wipedLabels on physical volume &quot;/dev/sdb2&quot; successfully wiped 将dev/sdb1 /dev/sdb2改回标签83[root@server_1 ~]# fdisk -l12345678910Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0xdd460f12 Device Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux/dev/sdb2 4196352 8390655 2097152 83 Linux]]></content>
      <categories>
        <category>RHCE</category>
      </categories>
      <tags>
        <tag>RHCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用nmcli设置网络]]></title>
    <url>%2Fpost%2Fd2e19130.html</url>
    <content type="text"><![CDATA[使用nmcli设置网卡，链路聚合，网桥 给新添加的网卡配置IP地址现有新添加的两张网卡eno33554992和eno50332216 在server1上使用nmcli[root@server_1 network-scripts]# nmcli connection add con-name eth1 type ethernet ifname eno33554992 ip4 192.168.19.102/24 gw4 192.168.19.1Connection ‘eth1’ (8099abb8-2a30-4d11-a3ae-ce4c5c534d8b) successfully added.[root@server_1 network-scripts]# nmcli connection add con-name eth2 type ethernet ifname eno50332216 ip4 192.168.19.103/24 gw4 192.168.19.1Connection ‘eth2’ (f127ca55-37d3-4913-8b62-1969ceabaacd) successfully added.[root@server_1 network-scripts]# ip addr1234567891011121314151617182: eno16777736: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:1c:2a:5b brd ff:ff:ff:ff:ff:ff inet 192.168.19.101/24 brd 192.168.19.255 scope global eno16777736 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fe1c:2a5b/64 scope link valid_lft forever preferred_lft forever3: eno33554992: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:1c:2a:65 brd ff:ff:ff:ff:ff:ff inet 192.168.19.102/24 brd 192.168.19.255 scope global eno33554992 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fe1c:2a65/64 scope link valid_lft forever preferred_lft forever4: eno50332216: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:1c:2a:6f brd ff:ff:ff:ff:ff:ff inet 192.168.19.103/24 brd 192.168.19.255 scope global eno50332216 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fe1c:2a6f/64 scope link valid_lft forever preferred_lft forever 删除使用nmcli con delete eth1 在server2上手工写配置文件[root@server_2 ~]# cd /etc/sysconfig/network-scripts/[root@server_2 network-scripts]# vim ifcfg-eth11234567NAME=eth1DEVICE=eno33554992ONBOOT=yesBOOTPROTO=noneIPADDR=192.168.19.202PREFIX=24GATEWAY=192.168.19.1 [root@server_2 network-scripts]# vim ifcfg-eth21234567NAME=eth2DEVICE=eno50332216ONBOOT=yesBOOTPROTO=noneIPADDR=192.168.19.203PREFIX=24GATEWAY=192.168.19.1 [root@server_2 network-scripts]# systemctl restart network[root@server_2 network-scripts]# ip addr1234567891011121314151617182: eno16777736: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:36:ce:06 brd ff:ff:ff:ff:ff:ff inet 192.168.19.201/24 brd 192.168.19.255 scope global eno16777736 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fe36:ce06/64 scope link valid_lft forever preferred_lft forever3: eno33554992: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:36:ce:10 brd ff:ff:ff:ff:ff:ff inet 192.168.19.202/24 brd 192.168.19.255 scope global eno33554992 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fe36:ce10/64 scope link valid_lft forever preferred_lft forever4: eno50332216: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:36:ce:1a brd ff:ff:ff:ff:ff:ff inet 192.168.19.203/24 brd 192.168.19.255 scope global eno50332216 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fe36:ce1a/64 scope link valid_lft forever preferred_lft forever [root@server_2 network-scripts]# ping 192.168.19.1021234567PING 192.168.19.102 (192.168.19.102) 56(84) bytes of data.64 bytes from 192.168.19.102: icmp_seq=1 ttl=64 time=0.665 ms64 bytes from 192.168.19.102: icmp_seq=2 ttl=64 time=0.377 ms^C--- 192.168.19.102 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1001msrtt min/avg/max/mdev = 0.377/0.521/0.665/0.144 ms 一张网卡配置多个IP地址[root@server_1 network-scripts]# nmcli connection modify eth1 +ipv4.addresses 192.168.20.2/24[root@server_1 network-scripts]# systemctl restart network[root@server_2 network-scripts]# nmcli connection modify eth1 +ipv4.addresses 192.168.20.4/24[root@server_2 network-scripts]# systemctl restart network[root@server_2 network-scripts]# ping 192.168.20.2 -I 192.168.20.4123456789PING 192.168.20.2 (192.168.20.2) from 192.168.20.4 : 56(84) bytes of data.64 bytes from 192.168.20.2: icmp_seq=1 ttl=64 time=0.577 ms64 bytes from 192.168.20.2: icmp_seq=2 ttl=64 time=0.461 ms64 bytes from 192.168.20.2: icmp_seq=3 ttl=64 time=0.442 ms64 bytes from 192.168.20.2: icmp_seq=4 ttl=64 time=0.463 ms^C--- 192.168.20.2 ping statistics ---4 packets transmitted, 4 received, 0% packet loss, time 3001msrtt min/avg/max/mdev = 0.442/0.485/0.577/0.059 ms 链路聚合将新的两张网卡聚合为一个team server1使用nmcli删除之前的配置的两张网卡[root@server_1 network-scripts]# nmcli connection delete eth1Connection ‘eth1’ (8099abb8-2a30-4d11-a3ae-ce4c5c534d8b) successfully deleted.[root@server_1 network-scripts]# nmcli connection delete eth2Connection ‘eth2’ (f127ca55-37d3-4913-8b62-1969ceabaacd) successfully deleted.[root@server_1 network-scripts]# nmcli connection add con-name team0 ifname team0 type team config &#39;{&quot;runner&quot;: {&quot;name&quot;: &quot;loadbalance&quot;}}&#39;Connection ‘team0’ (72a24350-f7fb-4909-b8d9-b0e4d63d4a3b) successfully added.[root@server_1 network-scripts]# nmcli connection modify team0 ipv4.addresses 192.168.19.102/24 ipv4.gateway 192.168.19.1 ipv4.method manual[root@server_1 network-scripts]# nmcli connection add con-name team0-port1 type team-slave ifname eno33554992 master team0Connection ‘team0-port1’ (be929ed1-410a-4f40-ac94-1f12b7c0322a) successfully added.[root@server_1 network-scripts]# nmcli connection add con-name team0-port2 type team-slave ifname eno50332216 master team0Connection ‘team0-port2’ (13972926-e23a-48aa-9e9f-c72e59300942) successfully added.[root@server_1 network-scripts]# nmcli connection up team0-port1Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/14)[root@server_1 network-scripts]# nmcli connection show --active1234NAME UUID TYPE DEVICEteam0-port1 be929ed1-410a-4f40-ac94-1f12b7c0322a 802-3-ethernet eno33554992team0 72a24350-f7fb-4909-b8d9-b0e4d63d4a3b team team0team0-port2 13972926-e23a-48aa-9e9f-c72e59300942 802-3-ethernet eno50332216 server2手工写配置文件删除之前的配置的两张网卡[root@server_2 network-scripts]# nmcli connection delete eth1Connection ‘eth1’ (8099abb8-2a30-4d11-a3ae-ce4c5c534d8b) successfully deleted.[root@server_2 network-scripts]# nmcli connection delete eth2Connection ‘eth2’ (f127ca55-37d3-4913-8b62-1969ceabaacd) successfully deleted.[root@server_2 network-scripts]# vim ifcfg-team0123456789DEVICE=team0NAME=team0DEVICETYPE=TeamTEAM_CONFIG="&#123;\"runner\": &#123;\"name\": \"activebackup\"&#125;&#125;"BOOTPROTO=noneONBOOT=yesIPADDR=192.168.19.202PREFIX=24GATEWAY=192.168.19.1 [root@server_2 network-scripts]# vim ifcfg-team0-port112345NAME=team0-port1DEVICE=eno33554992ONBOOT=yesTEAM_MASTER=team0DEVICETYPE=TeamPort [root@server_2 network-scripts]# vim ifcfg-team0-port212345NAME=team0-port2DEVICE=eno50332216ONBOOT=yesTEAM_MASTER=team0DEVICETYPE=TeamPort [root@server_2 network-scripts]# systemctl restart network[root@server_2 network-scripts]# ip addr1234568: team0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP link/ether 00:0c:29:36:ce:1a brd ff:ff:ff:ff:ff:ff inet 192.168.19.202/24 brd 192.168.19.255 scope global team0 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fe36:ce1a/64 scope link valid_lft forever preferred_lft forever [root@server_2 network-scripts]# nmcli connection show --active1234NAME UUID TYPE DEVICEteam0-port2 131891f6-d45a-42f7-0f6d-877668e7a054 802-3-ethernet eno50332216team0-port1 52c7a66a-0fc6-dec3-3c0f-652871d89b75 802-3-ethernet eno33554992team0 702de3eb-2e80-897c-fd52-cd0494dd8123 team team0 [root@server_2 network-scripts]# ping 192.168.19.102 -I team012345678PING 192.168.19.102 (192.168.19.102) from 192.168.19.202 team0: 56(84) bytes of data.64 bytes from 192.168.19.102: icmp_seq=10 ttl=64 time=0.776 ms64 bytes from 192.168.19.102: icmp_seq=11 ttl=64 time=0.413 ms64 bytes from 192.168.19.102: icmp_seq=12 ttl=64 time=0.424 ms^C--- 192.168.19.102 ping statistics ---12 packets transmitted, 3 received, 75% packet loss, time 11001msrtt min/avg/max/mdev = 0.413/0.537/0.776/0.170 ms 网桥server1使用nmcli[root@server_1 ~]# nmcli connection delete team0Connection ‘team0’ (72a24350-f7fb-4909-b8d9-b0e4d63d4a3b) successfully deleted.[root@server_1 ~]# nmcli connection delete team0-port1Connection ‘team0-port1’ (be929ed1-410a-4f40-ac94-1f12b7c0322a) successfully deleted.[root@server_1 ~]# nmcli connection delete team0-port2Connection ‘team0-port2’ (13972926-e23a-48aa-9e9f-c72e59300942) successfully deleted.[root@server_1 ~]# nmcli device status123DEVICE TYPE STATE CONNECTIONeno33554992 ethernet disconnected --eno50332216 ethernet disconnected -- [root@server_1 ~]# nmcli connection add con-name br0 ifname br0 type bridgeConnection ‘br0’ (57e1d948-c13c-4b43-a1df-ae15b3dd7bcf) successfully added.[root@server_1 ~]# nmcli connection modify br0 ipv4.addresses 192.168.19.102/24 ipv4.gateway 192.168.19.1 ipv4.method manual[root@server_1 ~]# nmcli connection add con-name br0-port1 ifname eno33554992 type bridge-slave master br0Connection ‘br0-port1’ (48597166-ff58-41ca-adfe-47dac44c5aca) successfully added.[root@server_1 ~]# nmcli connection add con-name br0-port2 ifname eno50332216 type bridge-slave master br0Connection ‘br0-port2’ (85936f31-7db6-431f-a165-e052df484431) successfully added.[root@server_1 ~]# nmcli device status12345DEVICE TYPE STATE CONNECTIONbr0 bridge connected br0eno16777736 ethernet connected eno16777736eno33554992 ethernet connected br0-port1eno50332216 ethernet connected br0-port2 [root@server_1 ~]# ip addr123456789103: eno33554992: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP qlen 1000 link/ether 00:0c:29:1c:2a:65 brd ff:ff:ff:ff:ff:ff4: eno50332216: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP qlen 1000 link/ether 00:0c:29:1c:2a:6f brd ff:ff:ff:ff:ff:ff8: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP link/ether 00:0c:29:1c:2a:65 brd ff:ff:ff:ff:ff:ff inet 192.168.19.102/24 brd 192.168.19.255 scope global br0 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fe1c:2a65/64 scope link valid_lft forever preferred_lft forever server2手工写配置文件[root@server_2 network-scripts]# nmcli connection delete team0Connection ‘team0’ (702de3eb-2e80-897c-fd52-cd0494dd8123) successfully deleted.[root@server_2 network-scripts]# nmcli connection delete team0-port1Connection ‘team0-port1’ (52c7a66a-0fc6-dec3-3c0f-652871d89b75) successfully deleted.[root@server_2 network-scripts]# nmcli connection delete team0-port2Connection ‘team0-port2’ (131891f6-d45a-42f7-0f6d-877668e7a054) successfully deleted.[root@server_2 network-scripts]# vim ifcfg-br012345678910DEVICE=br0NAME=br0STP=yesTYPE=BridgeBOOTPROTO=noneIPADDR=192.168.19.202PREFIX=24GATEWAY=192.168.19.1ONBOOT=yesBRIDGE_OPTS=priority=32768 [root@server_2 network-scripts]# vim ifcfg-br0-port112345TYPE=EthernetNAME=br0-port1DEVICE=eno33554992ONBOOT=yesBRIDGE=br0 [root@server_2 network-scripts]# vim ifcfg-br0-port212345TYPE=EthernetNAME=br0-port2DEVICE=eno50332216ONBOOT=yesBRIDGE=br0 [root@server_2 network-scripts]# systemctl restart network[root@server_2 network-scripts]# nmcli device status12345DEVICE TYPE STATE CONNECTIONbr0 bridge connected br0eno16777736 ethernet connected eno16777736eno33554992 ethernet connected br0-port1eno50332216 ethernet connected br0-port2 [root@server_2 network-scripts]# ip addr123456783: eno33554992: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP qlen 1000 link/ether 00:0c:29:36:ce:10 brd ff:ff:ff:ff:ff:ff4: eno50332216: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP qlen 1000 link/ether 00:0c:29:36:ce:1a brd ff:ff:ff:ff:ff:ff8: br0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN link/ether 00:0c:29:36:ce:10 brd ff:ff:ff:ff:ff:ff inet 192.168.19.202/24 brd 192.168.19.255 scope global br0 valid_lft forever preferred_lft forever [root@server_2 network-scripts]# ping -I br0 192.168.19.102123456789PING 192.168.19.102 (192.168.19.102) from 192.168.19.202 br0: 56(84) bytes of data.64 bytes from 192.168.19.102: icmp_seq=12 ttl=64 time=0.818 ms64 bytes from 192.168.19.102: icmp_seq=13 ttl=64 time=0.441 ms64 bytes from 192.168.19.102: icmp_seq=14 ttl=64 time=0.507 ms64 bytes from 192.168.19.102: icmp_seq=15 ttl=64 time=0.444 ms^C--- 192.168.19.102 ping statistics ---15 packets transmitted, 4 received, 73% packet loss, time 14006msrtt min/avg/max/mdev = 0.441/0.552/0.818/0.157 ms 综合实验：两张网卡链路聚合，在和第三张网卡组成网桥配置team0[root@server_1 ~]# nmcli connection add con-name team0 ifname team0 type team config &#39;{&quot;runner&quot;: {&quot;name&quot;: &quot;loadbalance&quot;}}&#39;Connection ‘team0’ (9c635d95-312d-4369-a0d3-18c122468437) successfully added.[root@server_1 ~]# nmcli connection add con-name team0-port1 ifname eno33554992 type team-slave master team0Connection ‘team0-port1’ (2098e51e-d30c-4343-be2e-c252fe413187) successfully added.[root@server_1 ~]# nmcli connection add con-name team0-port2 ifname eno50332216 type team-slave master team0Connection ‘team0-port2’ (f484116a-7009-4154-88de-342395af8949) successfully added.[root@server_1 ~]# teamdctl team0 state1234567891011121314151617setup: runner: loadbalanceports: eno33554992 link watches: link summary: up instance[link_watch_0]: name: ethtool link: up down count: 0 eno50332216 link watches: link summary: up instance[link_watch_0]: name: ethtool link: up down count: 0 停止team0，停止NetworkManager[root@server_1 ~]# nmcli device disconnect team0Device ‘team0’ successfully disconnected.[root@server_1 ~]# systemctl stop NetworkManager[root@server_1 ~]# systemctl disable NetworkManager123Removed symlink /etc/systemd/system/multi-user.target.wants/NetworkManager.service.Removed symlink /etc/systemd/system/dbus-org.freedesktop.NetworkManager.service.Removed symlink /etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service. 配置br0[root@server_1 ~]# cd /etc/sysconfig/network-scripts/[root@server_1 network-scripts]# ll | grep ifcfg12345-rw-r--r--. 1 root root 314 May 7 23:49 ifcfg-eno16777736-rw-r--r--. 1 root root 254 Sep 16 2015 ifcfg-lo-rw-r--r--. 1 root root 334 May 11 14:32 ifcfg-team0-rw-r--r--. 1 root root 127 May 11 14:32 ifcfg-team0-port1-rw-r--r--. 1 root root 127 May 11 14:33 ifcfg-team0-port2 将team0添加到br0[root@server_1 network-scripts]# vim ifcfg-team0删除多余配置，增加BRIDGE变量等于br01234567DEVICE=team0TEAM_CONFIG="&#123;\"runner\": &#123;\"name\": \"loadbalance\"&#125;&#125;"DEVICETYPE=TeamNAME=team0UUID=0f896254-6965-4f0f-ab28-e2c2fa1cb3deONBOOT=yesBRIDGE=br0 配置br0[root@server_1 network-scripts]# vim ifcfg-br0123456NAME=br0DEVICE=br0ONBOOT=yesTYPE=BridgeIPADDR=192.168.19.102PREFIC=24 重启network[root@server_1 network-scripts]# systemctl restart network 测试[root@server_2 ~]# ping 192.168.19.1021234567PING 192.168.19.102 (192.168.19.102) 56(84) bytes of data.64 bytes from 192.168.19.102: icmp_seq=1 ttl=64 time=0.854 ms64 bytes from 192.168.19.102: icmp_seq=2 ttl=64 time=0.538 ms^C--- 192.168.19.102 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1000msrtt min/avg/max/mdev = 0.538/0.696/0.854/0.158 ms]]></content>
      <categories>
        <category>RHCE</category>
      </categories>
      <tags>
        <tag>RHCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ISCSI服务的搭建]]></title>
    <url>%2Fpost%2F3125c0a4.html</url>
    <content type="text"><![CDATA[ISCSI服务的搭建 准备一个可用的分区[root@server_1 ~]# lsblk12345678NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 20G 0 disk├─sda1 8:1 0 200M 0 part /boot├─sda2 8:2 0 10G 0 part /├─sda3 8:3 0 2G 0 part [SWAP]├─sda4 8:4 0 512B 0 part└─sda5 8:5 0 1G 0 partsr0 11:0 1 3.8G 0 rom /mnt 这里我准备了sda5用作iSCSI的挂载 安装软件[root@server_1 ~]# yum install targetcli -y 配置[root@server_1 ~]# targetcli123456789/&gt; lso- / .................................................. [...] o- backstores ....................................... [...] | o- block ........................... [Storage Objects: 0] | o- fileio .......................... [Storage Objects: 0] | o- pscsi ........................... [Storage Objects: 0] | o- ramdisk ......................... [Storage Objects: 0] o- iscsi ..................................... [Targets: 0] o- loopback .................................. [Targets: 0] 创建块设备block/&gt; cd /backstores/block/backstores/block&gt; create block1 /dev/sda5Created block storage object block1 using /dev/sda5. 创建iqn/backstores/block&gt; cd /iscsi/iscsi&gt; create iqn.2019-04.example.com:server 1234Created target iqn.2019-04.example.com:server.Created TPG 1.Global pref auto_add_default_portal=trueCreated default portal listening on all IPs (0.0.0.0), port 3260. 配置访问控制列表/iscsi&gt; cd iqn.2019-04.example.com:server/tpg1/acls/iscsi/iqn.20...ver/tpg1/acls&gt; create iqn.2019-04.example.com:desktopCreated Node ACL for iqn.2019-04.example.com:desktop 添加luns/iscsi/iqn.20...ver/tpg1/acls&gt; cd ../iscsi/iqn.20...m:server/tpg1&gt; cd luns/iscsi/iqn.20...ver/tpg1/luns&gt; create /backstores/block/block1Created LUN 0.Created LUN 0-&gt;0 mapping in node ACL iqn.2019-04.example.com:desktop 创建portal接口/iscsi/iqn.20...ver/tpg1/luns&gt; cd ../iscsi/iqn.20...m:server/tpg1&gt; cd portals//iscsi/iqn.20.../tpg1/portals&gt; delete 0.0.0.0 3260Deleted network portal 0.0.0.0:3260/iscsi/iqn.20.../tpg1/portals&gt; create 192.168.19.101 3260Using default IP port 3260Created network portal 192.168.19.101:3260. 查看配置/iscsi/iqn.20.../tpg1/portals&gt; cd 1234567891011121314151617o- / ..................................................[... o- backstores .......................................[... | o- block ...........................[Storage Objects: 1 | | o- block1 ...[/dev/sda5 (1.0GiB) write-thru activated | o- fileio ..........................[Storage Objects: 0 | o- pscsi ...........................[Storage Objects: 0 | o- ramdisk .........................[Storage Objects: 0 o- iscsi .....................................[Targets: 1 | o- iqn.2019-04.example.com:server .............[TPGs: 1 | o- tpg1 ........................[no-gen-acls, no-auth | o- acls ...................................[ACLs: 1 | | o- iqn.2019-04.example.com:desktop [Mapped LUNs: 1 | | o- mapped_lun0 .........[lun0 block/block1 (rw) | o- luns ...................................[LUNs: 1 | | o- lun0 ................[block/block1 (/dev/sda5) | o- portals .............................[Portals: 1 | o- 192.168.19.101:3260 .......................[OK o- loopback ..................................[Targets: 0 退出保存/iscsi/iqn.20.../tpg1/portals&gt; exit 123Global pref auto_save_on_exit=trueLast 10 configs saved in /etc/target/backup.Configuration saved to /etc/target/saveconfig.json 配置防火墙[root@server_1 ~]# firewall-cmd --add-port=3260/tcp --persuccess[root@server_1 ~]# systemctl restart firewalld[root@server_1 ~]# systemctl restart target[root@server_1 ~]# systemctl enable targetCreated symlink from /etc/systemd/system/multi-user.target.wants/target.service to /usr/lib/systemd/system/target.service. 客户端测试 安装软件[root@server_2 ~]# yum install iscsi-initiator-utils.i686 -y[root@server_2 ~]# vim /etc/iscsi/initiatorname.iscsi 1InitiatorName=iqn.2019-04.example.com:desktop 重启服务[root@server_2 ~]# systemctl daemon-reload[root@server_2 ~]# systemctl restart iscsi 发现节点[root@server_2 ~]# iscsiadm -m discovery -t st -p 192.168.19.101192.168.19.11:3260,1 iqn.2019-04.example.com:server 登入节点[root@server_2 ~]# iscsiadm -m node -T iqn.2019-04.example.com:server -p 192.168.19.101:3260 -l 12Logging in to [iface: default, target: iqn.2019-04.example.com:server, portal: 192.168.19.11,3260] (multiple)Login to [iface: default, target: iqn.2019-04.example.com:server, portal: 192.168.19.11,3260] successful. 查看挂载的节点分区并格式化分区[root@server_2 ~]# fdisk /dev/sdb[root@server_2 ~]# mkfs.ext4 /dev/sdb1[root@server_2 ~]# fdisk -l 123456789Disk /dev/sdb: 1073 MB, 1073741824 bytes, 2097152 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 4194304 bytesDisk label type: dosDisk identifier: 0x86f45fd8 Device Boot Start End Blocks Id System/dev/sdb1 8192 2097151 1044480 83 Linux 查看和区分[root@server_2 ~]# ll /dev/disk/by-path/ 123total 0lrwxrwxrwx. 1 root root 9 Apr 28 22:00 ip-192.168.19.101:3260-iscsi-iqn.2019-04.example.com:server-lun-0 -&gt; ../../sdblrwxrwxrwx. 1 root root 10 Apr 28 22:03 ip-192.168.19.101:3260-iscsi-iqn.2019-04.example.com:server-lun-0-part1 -&gt; ../../sdb1 挂载对应的分区[root@server_2 ~]# mkdir /iqn[root@server_2 ~]# blkid /dev/sdb1/dev/sdb1: UUID=”feb53194-cefe-42d7-b721-1b95d3d04158” TYPE=”ext4”[root@server_2 ~]# vim /etc/fstab 1UUID=feb53194-cefe-42d7-b721-1b95d3d04158 /iqn ext4 defaults,_netdev 0 0 [root@server_2 ~]# mount -a [root@server_2 ~]# df -Th | grep sdb1 /dev/sdb1 ext4 988M 2.6M 919M 1% /iqn登出节点[root@test_2 ~]# umount /iqn[root@test_2 ~]# iscsiadm -m node -T iqn.2019-04.example.com:server -p 192.168.19.101 -u]]></content>
      <categories>
        <category>RHCE</category>
      </categories>
      <tags>
        <tag>RHCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Samba服务的搭建]]></title>
    <url>%2Fpost%2F5997ae1f.html</url>
    <content type="text"><![CDATA[Samba服务的搭建 要求共享/sambashare属于marketing组的用户rob有访问权限不属于marketing组的用户brian没有访问权限[root@server_1 ~]# groupadd -r marketing[root@server_1 ~]# useradd -s /sbin/nologin -G marketing rob[root@server_1 ~]# useradd -s /sbin/nologin brian[root@server_1 ~]# mkdir /sambashare[root@server_1 ~]# chgrp marketing /sambashare[root@server_1 ~]# chmod 2775 /sambashare 安装软件包[root@server_1 ~]# yum install samba\* -y 修改配置文件[root@server_1 ~]# vim /etc/samba/smb.conf1234[sambashare] path = /sambashare writeable = no write list = @marketing [root@server_1 ~]# smbpasswd -a biran[root@server_1 ~]# smbpasswd -a rob 配置selinux[root@server_1 ~]# semanage fcontent -a -t samba_share_t /sambashare&quot;(/.*)?&quot;[root@server_1 ~]# restorecon -vvFR /sambashare 设置防火墙[root@server_1 ~]# systemctl restart smb nmb[root@server_1 ~]# systemctl enable smb nmb[root@server_1 ~]# firewall-cmd --add-service=samba --per[root@server_1 ~]# systemctl restart firewalld 客户端测试[root@server_2 ~]# yum install cifs-utils.x86_64 -y[root@server_2 ~]# mkdir /sambashare_rob /sambashare_brian临时挂载[root@server_2 ~]# mount -o username=rob,password=redaht //192.168.19.101/sambashare /sambashare_rob[root@server_2 ~]# mount -o username=brian,password=redhat //192.168.19.101/sambashare /sambashare_brian永久挂载[root@server_2 ~]# vim /etc/fstab1//192.168.19.101/sambashare /sambashare_rob cifs defaults,multiuser,username=rob,password=redhat,sec=ntlmssp,_netdev 0 0 [root@server_2 ~]# mount -a[root@server_2 ~]# touch /sambashare_rob/test[root@server_2 ~]# touch /sambashare_brian/testtouch: cannot touch ‘/sambashare_brian/test’: Permission denied 要求2要求test1用户和test2用户可以挂载只允许test1用户[root@server_1 ~]# useradd -s /sbin/nologin test1[root@server_1 ~]# useradd -s /sbin/nologin test2[root@server_1 ~]# chmod o+w /sambashare 修改配置文件[root@server_1 ~]# vim /etc/samba/smb.conf1write list = test1 [root@server_1 ~]# smbpasswd -a test1[root@server_1 ~]# smbpasswd -a test2[root@server_1 ~]# systemctl restart smb nmb 客户端测试[root@server_2 /]# useradd test1[root@server_2 /]# useradd test2[root@server_2 /]# mkdir /test[root@server_2 ~]# vim /etc/fstab1//192.168.19.101/sambashare /test cifs defaults,multiuser,username=test1,password=redhat,sec=ntlmssp,_netdev 0 0 [root@server_2 ~]# mount -a[root@server_2 /]# su - test1[test1@server_2 ~]$ cd /test[test1@server_2 test]$ touch xxtouch: cannot touch ‘/test/xx’: Permission denied[test1@server_2 test]$ cifscreds 192.168.19.101[test1@server_2 test]$ touch xx[root@server_2 /]# su - test2[test2@server_2 ~]$ cd /test[test2@server_2 test]$ touch xxtouch: cannot touch ‘/test/xx’: Permission denied]]></content>
      <categories>
        <category>RHCE</category>
      </categories>
      <tags>
        <tag>RHCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NFS服务的搭建]]></title>
    <url>%2Fpost%2F6b73b6a5.html</url>
    <content type="text"><![CDATA[NFS服务的搭建 要求共享/public和/protected两个目录要求public目录任何人都可以访问且只有ro权限要求protected目录只有192.168.19.0网段可以访问且拥有rw权限[root@server_1 /]# mkdir /public/ /protected/[root@server_1 /]# echo this is nfs test &gt; /public/test测试结果应该为 客户端挂载到的public目录只可以查看test文件而不能touch文件客户端挂载到的protected目录可以touch文件 安装软件包[root@server_1 /]# yum install nfs\* -y 编辑配置文件[root@server_1 /]# vim /etc/exports12/public *(ro) //允许所有用户只有只读权限/protected 192.168.19.0/24(rw,no_root_squash,sync) [root@server_1 /]# exprotfs -r //每次修改配置文件或添加共享文件都要执行[root@test_1 ~]# showmount -e localhost//查看配置123Export list for localhost:/public */protected 192.168.19.0/24 配置selinux[root@server_1 /]# semanage fcontext -a -t public_content_t /public&quot;(/.*)?&quot;[root@server_1 /]# semanage fcontext -a -t public_content_t /protected&quot;(/.*)?&quot;[root@server_1 /]# restorecon -vvFR /public /protected 设置防火墙[root@server_1 /]# systemctl restart nfs[root@server_1 /]# firewall-cmd --add-service=nfs --per[root@test_1 ~]# systemctl enable nfs-server.service 客户端测试[root@server_2 ~]# mkdir /public_nfs/ /protected_nfs/[root@server_2 ~]# mount 192.168.19.101:/public /public_nfs/[root@server_2 ~]# mount 192.168.19.101:/protected /protected_nfs/[root@server_2 ~]# cat /public_nfs/testthis is nfs test[root@server_2 ~]# touch /public_nfs/xxtouch: cannot touch ‘/public_nfs/xx’: Read-only file system[root@server_2 ~]# touch /protected_nfs/xx测试结果与预期相同]]></content>
      <categories>
        <category>RHCE</category>
      </categories>
      <tags>
        <tag>RHCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建基于https协议的静态网站]]></title>
    <url>%2Fpost%2F5298bbcd.html</url>
    <content type="text"><![CDATA[搭建基于https协议的静态网站 安装ssl[root@server_1 ~]# yum install mod_ssl -y 创建key[root@server_1 ~]# cd /etc/pki/tls/certs/[root@server_1 certs]# make test.crt12345678910111213141516171819202122232425umask 77 ; \/usr/bin/openssl genrsa -aes128 2048 &gt; test.keyGenerating RSA private key, 2048 bit long modulus............+++.......................................................................................+++e is 65537 (0x10001)Enter pass phrase: //输入密码Verifying - Enter pass phrase: //确认密码umask 77 ; \/usr/bin/openssl req -utf8 -new -key test.key -x509 -days 365 -out test.crt -set_serial 0Enter pass phrase for test.key: //与上述密码相同You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter '.', the field will be left blank.-----Country Name (2 letter code) [XX]:CN //国家代码State or Province Name (full name) []:shanxi //省份Locality Name (eg, city) [Default City]:xian //城市Organization Name (eg, company) [Default Company Ltd]:openlab //公司名Organizational Unit Name (eg, section) []:tech //部门Common Name (eg, your name or your server's hostname) []:www.test.com //域名Email Address []:openlab@163.com //邮箱 编辑配置文件[root@server_1 ~]# vim /etc/httpd/conf.d/vhost.conf修改如下内容12345678910&lt;VirtualHost 192.168.19.102&gt;SSLEngine onSSLProtocol all -SSLv2SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5SSLCertificateFile /etc/pki/tls/certs/test.crtSSLCertificateKeyFile /etc/pki/tls/certs/test.keyDocumentRoot /www/100ServerName 192.168.19.102ServerAdmin root@localhost&lt;/VirtualHost&gt; [root@test_1 certs]# echo this is https test &gt; /www/100/index.html 配置防火墙[root@server_1 certs]# firewall-cmd --add-port=443/tcp --per[root@server_1 certs]# systemctl restart firewalld[root@server_1 certs]# systemctl restart httpdEnter SSL pass phrase for 192.168.19.102:443 (RSA) : **这里重启httpd时需要输入之前配置好的RSA密钥 客户端测试Firefox访问 https://192.168.19.102会提示此链接不安全，继续访问的话可以看到内容this is https test]]></content>
      <categories>
        <category>RHCE</category>
      </categories>
      <tags>
        <tag>RHCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于域名对web服务器的访问]]></title>
    <url>%2Fpost%2Fbe5db992.html</url>
    <content type="text"><![CDATA[搭建基于域名对web服务器的访问 修改配置文件[root@server_1 ~]# vim /etc/httpd/conf.d/vhost.conf修改如下内容123456&lt;VirtualHost 192.168.19.103&gt;DocumentRoot /www/aliasServerName www.alias.comServerAlias www.alias1.comServerAdmin root@localhost&lt;/VirtualHost&gt; [root@server_1 ~]# mkdir /www/alias[root@server_1 ~]# echo this is alias test &gt; /www/alias/index.html修改服务器hosts文件[root@server_1 ~]# vim /etc/hosts12192.168.19.103 www.alias.com192.168.19.103 www.alias1.com 修改客户端hosts文件[root@server_2 ~]# vim /etc/hosts12192.168.19.103 www.alias.com192.168.19.103 www.alias1.com 配置selinux[root@test_1 ~]# restorecon -vvFR /www/ 配置防火墙不用配置防火墙重启httpd服务[root@server_1 ~]# systemctl restart httpd 客户端测试[root@server_2 ~]# curl www.alias.comthis is alias test[root@server_2 ~]# curl www.alias1.comthis is alias test]]></content>
      <categories>
        <category>RHCE</category>
      </categories>
      <tags>
        <tag>RHCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于端口对web服务器的访问]]></title>
    <url>%2Fpost%2F3c7c4242.html</url>
    <content type="text"><![CDATA[搭建基于端口的web服务器的访问 修改配置文件[root@server_1 ~]# vim /etc/httpd/conf.d/vhost.conf增加如下内容123456LISTEN 10000&lt;VirtualHost 192.168.19.103:10000&gt;DocumentRoot /www/200ServerName 192.168.19.103ServerAdmin root@localhost&lt;/VirtualHost&gt; [root@server_1 ~]# echo this is port 10000 test &gt; /www/200/index.html 配置selinux[root@server_1 ~]# semanage port -a -t http_port_t -p tcp 10000 配置防火墙[root@server_1 ~]# firewall-cmd --add-port=10000/tcp --per[root@server_1 ~]# systemctl restart firewalld[root@server_1 ~]# systemctl restart httpd 客户端测试[root@server_2 ~]# curl 192.168.19.103:10000this is port 10000 test]]></content>
      <categories>
        <category>RHCE</category>
      </categories>
      <tags>
        <tag>RHCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于ip地址对web服务器的访问]]></title>
    <url>%2Fpost%2Fb0401d5e.html</url>
    <content type="text"><![CDATA[搭建基于ip地址对web服务器的访问 要求一个ip对应一个网。例如实现以下操作：建立一个192.168.19.102的网站 ，文件放在/www/100,内容显示this is 192.168.19.102.建立一个192.168.19.103的网站 ，文件放在/www/200,内容显示this is 192.168.19.103. 配置网络首先给虚拟机配置三块网卡并设置好IP地址，默认网卡已经配置好[root@server_1 ~]# nmcli connection modify eno33554960 ipv4.addresses 192.168.19.102/24 ipv4.gateway 192.168.19.1 ipv4.dns 8.8.8.8 ipv4.method manual connection.autoconnect yes[root@server_1 ~]# nmcli connection modify eno50332184 ipv4.addresses 192.168.19.103/24 ipv4.gateway 192.168.19.1 ipv4.dns 8.8.8.8 ipv4.method manual connection.autoconnect yes[root@server_1 ~]# nmcli connection up eno33554960[root@server_1 ~]# nmcli connection up eno50332184也可以去图形界面配置IP地址，这里我的三块网卡IP地址分别为192.168.19.101192.168.19.102192.168.19.103 编辑配置文件[root@server_1 ~]# mkdir -p /www/{100,200}[root@server_1 ~]# echo this is 192.168.19.102 &gt; /www/100/index.html[root@server_1 ~]# echo this is 192.168.19.103 &gt; /www/200/index.html[root@server_1 ~]# vim /etc/httpd/conf.d/vhost.conf12345678910111213141516&lt;Directory /www&gt;AllowOverride noneRequire all granted&lt;/Directory&gt;&lt;VirtualHost 192.168.19.102&gt;DocumentRoot /www/100ServerName 192.168.19.102ServerAdmin root@localhost&lt;/VirtualHost&gt;&lt;VirtualHost 192.168.19.103&gt;DocumentRoot /www/200ServerName 192.168.19.103ServerAdmin root@localhost&lt;/VirtualHost&gt; 配置selinux添加selinux上下文[root@server_1 ~]# semanage fcontext -a -t httpd_sys_content_t /www&quot;(/.*)?&quot;重新加载selinux上下文[root@server_1 ~]# restorecon -vvFR /www重启httpd服务[root@server_1 ~]# systemctl restart httpd 客户端测试[root@server_2 ~]# curl 192.168.19.102this is 192.168.19.102[root@server_2 ~]# curl 192.168.19.103this is 192.168.19.103]]></content>
      <categories>
        <category>RHCE</category>
      </categories>
      <tags>
        <tag>RHCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建基于http协议的静态网站]]></title>
    <url>%2Fpost%2Fbd25e061.html</url>
    <content type="text"><![CDATA[搭建静态网站——基于http协议的静态网站 安装软件[root@server_1 ~]# yum install httpd\* -y 编辑配置文件默认测试静态页面不需要编辑主配置文件 编辑index.html的内容[root@server_1 ~]# echo hello world! &gt; /var/www/html/index.html 配置selinux[root@server_1 ~]# vim /etc/selinux/configSELINUX=enforcing[root@server_1 ~]# setenforce 1[root@server_1 ~]# getenforceEnforcing 配置防火墙放行http服务[root@server_1 ~]# firewall-cmd --add-service=http --per放行80端口[root@server_1 ~]# firewall-cmd --add-port=80/tcp --per开机自动启动httpd服务[root@server_1 ~]# systemctl enable httpd重启httpd服务[root@server_1 ~]# systemctl restart httpd重启防火墙[root@server_1 ~]# systemctl restart firewalld 客户端测试[root@server_2 ~]# curl 192.168.19.101hello world!]]></content>
      <categories>
        <category>RHCE</category>
      </categories>
      <tags>
        <tag>RHCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yum源配置]]></title>
    <url>%2Fpost%2F135ecb38.html</url>
    <content type="text"><![CDATA[redhat linux7 yum源配置 挂在镜像到/mnt临时挂载[root@server_1 ~]# mount /dev/sr0 /mnt/永久挂载,建议永久挂载[root@server_1 ~]# vim /etc/fstab1/dev/sr0 /mnt iso9660 defaults 0 0 [root@server_1 ~]# mount -a 定义配置文件[root@server_1 ~]# vim /etc/yum.repos.d/name.repo12345[name]name=basebaseurl=file:///mnt/enable=1gpgcheck=0 测试1234567891011121314151617181920212223242526272829303132333435[root@server_1 ~]# yum install tree\* -yLoaded plugins: langpacks, product-id, search-disabled-repos, subscription- : managerThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.Resolving Dependencies--&gt; Running transaction check---&gt; Package tree.x86_64 0:1.6.0-10.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved================================================================================= Package Arch Version Repository Size=================================================================================Installing: tree x86_64 1.6.0-10.el7 name 46 kTransaction Summary=================================================================================Install 1 PackageTotal download size: 46 kInstalled size: 87 kDownloading packages:Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : tree-1.6.0-10.el7.x86_64 1/1 Verifying : tree-1.6.0-10.el7.x86_64 1/1Installed: tree.x86_64 0:1.6.0-10.el7Complete!]]></content>
      <categories>
        <category>RHCSA</category>
      </categories>
      <tags>
        <tag>RHCSA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux树形目录结构]]></title>
    <url>%2Fpost%2F304fb554.html</url>
    <content type="text"><![CDATA[关于Linux系统基本的树形目录结构 Linux树形目录图 目录详解根目录/ 处于linux系统树形结构的最顶端，它是linux文件系统的入口，所有的目录、文件、设备都在/之下。/bin bin是Binary的缩写，存放着linux系统命令。/dev dev是Device的缩写。存放的是linux的外部设备，在linux中访问设备的方式和访问文件的方式是相同的。（注意：设备文件不是驱动程序。过去，在添加新磁盘或设备后，往往需要手动增加设备文件。现在通常我们不需要手动增加设备文件，运行一下service kudzu start ，系统就会自动配置相应的设备。）/home 用户的主目录。在liunx系统中，每个用户都有一个自己的目录，一般该目录名是以用户的帐号命名的。/lib 这个目录里存放着系统最基本的动态链接共享库，包含许多被/bin/和/sbin/中的程序使用的库文件，目录/usr/lib/中含有更多用于用户程序的库文件。作用类似于windows里的DLL文件，几乎所有的应用程序都需要用到这些共享库。/media linux系统自动识别的一些设备，例如U盘、光驱、移动硬盘等，linux会把识别的设备挂载到这个目录下。/mnt 系统提供该目录是为了让用户临时挂载别的文件系统的，可以将光驱挂载到/mnt/上，然后进入该目录就可以查看光驱里的内容。/opt 主机额外安装软件所摆放的目录。默认是空的。/root 超级管理员的用户主目录。/selinux 这个目录是RedHat/CentOS所特有的目录，Selinux是一个安全机制，这个比较复杂，这个目录就是存放Selinux相关的文件的，一般我们安装操作系统的时候禁止使用它。/sys 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs，sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统种被创建。/usr 包括与系统用户直接有关的文件和目录，例如应用程序及支持它们的库文件。类似于windows下的program files目录。/boot 包括内核和其它系统启动期间使用的文件。是启动linux时使用的核心文件，有连接文件和镜像文件。/etc 存放系统配置文件和目录，非常重要，经常会用到它，要牢记。/lost+found 默认为空，被FSCK（file system check用来检查和维护不一致的文件系统。若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查）用来放置零散文件（没有名称的文件）。当系统非法关机后，这里就会存放一些文件。/misc 存放杂项文件或目录，即那些用途或含义不明确的文件或目录可以存放在该目录下。/proc 操作系统运行时，进程（正在运行中的程序）信息及内核信息（比如cpu、硬盘分区、内存信息等）存放在这里。/proc目录是伪装的文件系统proc的挂载目录，proc并不是真正的文件系统。因此，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。也就是说，这个目录的内容不在硬盘上而是在内存里。/sbin 大多数涉及系统管理的命令都存放在该目录中，它是超级权限用户root的可执行命令存放地，普通用户无权限执行这个目录下的命令，凡是目录sbin中包含的命令都是root权限才能执行的。/srv 该目录存放一些服务启动之后需要提取的数据。/tmp 该目录用于存放临时文件，有时用户运行程序的时候，会产生一些临时文件。/tmp就是用来存放临时文件的。/var/tmp目录和该目录的作用是相似的。/var 该目录的内容是经常变动的，/var下有/var/log目录用来存放系统日志的目录。/var/www目录用来定义Apache服务器站点存放目录。/var/lib用来存放一些库文件。 其它重要系统目录/usr/bin 这个目录是可执行程序的目录，普通用户就有权限执行。当我们从系统自带的软件包安装一个程序时，他的可执行文件大多会放在这个目录。相似的目录是/usr/local/bin目录。有时/usr/bin中的文件是/usr/local/bin的链接文件。/usr/sbin 这个目录也是可执行程序的目录，但大多存放涉及系统管理的命令。只有root权限才能执行，相似目录是/sbin或/usr/local/sbin或/usr/X11R6/sbin等。/usr/src 内核源码默认的放置目录/proc/cpuinfo 关于处理器的信息，如类似、厂家、型号和性能等。比如cat /proc/cpuinfo/proc/devices 当前运行内核所配置的所有设备清单。/proc/filesystems 当前运行内核所配置的文件系统。/proc/dma 当前正在使用的DMA通道。/proc/interrupts 正在使用的中断和曾经有多少个中断。/proc/ioports当前正在使用的I/O端口。/etc/init.d这个目录是用来存放系统或服务器以System V模式启动的脚本，这在以System V模式启动或初始化的系统中常见。比如RedHat Fedora。/etc/xinetd.d 如果服务器是通过xinetd模式运行的，它的脚本要放在这个目录下。有些系统没有这个目录，比如Slackware，有些老的版本也没有。在Redhat Fedora中比较新的版本中存在。/etc/rc.d 这是Slackware发行版中有的一个目录，是BSD方式启动脚本的存放地，比如定义网卡，服务器开启脚本等。/etc/X11 是X-Window相关的配置文件存放地。/var/adm比如软件包安装信息、日志、管理信息等就存放在该目录下，在Slackware操作系统中是有这个目录的。在Fedora中好象没有。]]></content>
      <categories>
        <category>RHCSA</category>
      </categories>
      <tags>
        <tag>RHCSA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[破解redhat_Linux_7的密码]]></title>
    <url>%2Fpost%2F84febc34.html</url>
    <content type="text"><![CDATA[以下是破解Linux 7 密码的详细步骤 破解Red Hat Enterprise Linux 7的密码第一步：进入启动菜单 开机后选中第一项，然后按下键盘e键 会进入到如下界面 第二步：编辑启动菜单 进入此界面后，使用键盘的上下左右键使光标移动到linux16行尾添加rd.break （注意UTF-8后的空格），然后按下Ctrl+x执行 会进入到如下界面 第三步：更改密码 输入mount -o remount,rw /sysroot,然后回车 输入chroot /sysroot,然后回车 输入passwd root,然后回车 输入两次新密码 输入touch /.autorelabel 输入两次exit，之后会自动重启，即可进入开机界面，破解完成]]></content>
      <categories>
        <category>RHCSA</category>
      </categories>
      <tags>
        <tag>RHCSA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在虚拟机下安装Linux操作系统]]></title>
    <url>%2Fpost%2F6548567b.html</url>
    <content type="text"><![CDATA[以下是安装红帽Linux的详细步骤 在VMware虚拟机下安装Red Hat Enterprise Linux 7 前提条件 1.Intel处理器的电脑需在BIOS中开启处理器虚拟化技术 2.最好关闭不必要的安全软件，尤其是360（黑匣子事件） 3.准备好所需的VMware软件和Linux的安装镜像 第一步：新建虚拟机一.安装Vmware此处省略 二.新建Linux虚拟机 准备Red Hat Enterprise Linux 7的镜像，可去红帽官网下载下载Linux 打开VMware，点击左上角新建虚拟机 选择自定义 选择Workstation 14.x 选择稍后安装操作系统 选择Linux，选择Red Hat Enterprise Linux 7 选择安装的位置，这里我选择的是D:\Vmware\redhat7，建议不要选择C盘 处理器数量1，内核数量1 建议内存2G以上，如果自己笔记本内存较小的话，可以选择1GB足以。 这里我们选择NAT，也可以选择其他模式 选择推荐即可 选择SCSI 选择创建新虚拟磁盘 磁盘容量20GB足以，也可以更大，选择将虚拟磁盘拆分成多个文件 下一步即可 点击完成 至此，虚拟机已创建好，双击 CD/DVD（SATA） 选择使用ISO镜像文件，选择下载好的镜像文件即可，点击确定，至此创建Linux虚拟机的工作已全部完成，接下来是安装Linux的步骤 第二步：安装Linux 点击开启此虚拟机 鼠标点击到安装界面中（Ctrl+Alt可以将鼠标切换回系统），白字代表选中项，这里我们选择直接安装，也就是第一项 这里语言选择英文，有助于学习英语和避免后续中文乱码。 设置时间 Asia，Shanghai，设置时间之后点击Done 选择SOFTWARE SELECTION，进行安装图形化界面 左侧选择Server with GUI，右边选择KDE，点击Done 选择INSTALLATION DESTINATION，配置安装位置 选择20G的虚拟磁盘，选择I will configure partitioning，手动配置分区，点击Done 这里我们选择Standard Partition 添加第一个boot分区，如图示，如果不能输入，请打开小键盘，这里我们给了2000M，点击Add mount point 以此添加图中的三个分区，swap交换分区大小最好是安装时给予内存的一半以上，完成点击Done 点击Accept Changes 配置完了，选择Begin Installation 接下来就是漫长的等待过程，此时我们可以配置root的密码 密码最好8位以上，点击Done即可 配置普通用户的账号密码 安装完成后，点击Reboot 同意许可，输入1,2,c,c,即可，每输入一次，按一次回车，等待重启即可进入界面]]></content>
      <categories>
        <category>RHCSA</category>
      </categories>
      <tags>
        <tag>RHCSA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IPSEC-VPN]]></title>
    <url>%2Fpost%2F82530c7a.html</url>
    <content type="text"><![CDATA[不是不做，时候未到。 IPSEC VPN如何保障数据传递的安全性 私密性：使用对称加密算法和非对称加密算法 完整性：使用hash 散列函数 源认证：数字签名 hmac 不可否认性：数字证书 加密算法 对称加密算法：DES（56bit） 3DES（168bit） AES（256bit） 非对称加密算法：RSA DH ECC RC2/3/4/6 HASH 函数： 认证算法特点：1.不可逆性2.雪崩效应3.不等长输入、等长的输出4.不同的数据产生不同的hash值 MD5（128 bit） SHA（160 bit） 数字签名：将数据使用hash认证算法计算得到hash值，将hash值使用非对称算法中私钥加密。 数字证书：由可信的第三方颁发（CA机构），内容包含了该用户的对称加密算法，公钥、公司名、地址 VPN分类 二层VPN : FR ATM 三层VPN : GRE IPSEC VPN GRE：通用路由封装 ，无安全性保障 MPLS VPN：VPN是在ISP内完成的，安全性较高、有QOS保障 IPSEC VPN：VPN是在C网络中完成，安全性非常高，无QOS保障 IPSEC VPN：IPSEC，对IP数据进行加密或认证 使用IKE协商 ，使用ESP或AH封装保证数据传输的安全性. IPSEC VPN 模式： Transport mode ：传输模式,不会新增加IP头部 Tunnel mode ：隧道模式，增加了一个新的IP头部 IPSEC VPN工作过程分类： Site-to-site VPN ：站点到站点 LAN to LAN Remote-access ：远程访问 IPSEC VPN IKE ： Internet key exchange 互联网密钥交互协议 使用封装协议： ESP AH ESP ： 负载封装安全协议，使用IP封装协议为50，针对data或原始IPV4头部+Data进行加密，针对 ESPherder，payload，ESP，tail 进行认证，认证之后的Hash存放在ESP tail中. AH：认证头部，使用IP封装协议号位51，针对内层IP头部以及Data数据进行认证，不包含加密过程 源认证：HMAC ，密钥化哈希 SPI: 安全关联索引 Seq num：序列号 IV：初始化向量 实施IPSEC VPN 保证路由通信（双方site之间的公有IP地址时是可以互访） 定义感兴趣流量（针对某些流量使用IPSEC 传递） IKE 第一阶段，ISAKMP SA协商 IKE 第二阶段，IPSEC SA协商 将感兴趣流量、ISAKMP IPSEC SA等信息关联至crypto-map，在连接外网的接口上调用 终止IPSEC VPN 部署 保证通信R1(config)#ip route 0.0.0.0 0.0.0.0 12.1.1.2R2(config)#ip route 0.0.0.0 0.0.0.0 12.1.1.1结果 1234R1#ping ping 2.2.2.2 source 1.1.1.1Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 2.2.2.2, timeout is 2 seconds:!!!!! 定义感兴趣流量（使用ACL）R1(config)#access-list 100 permit icmp host 1.1.1.1 host 2.2.2.2R2(config)#access-list 100 permit icmp host 2.2.2.2 host 1.1.1.1 定义ISAKMP SA信息 定义ISAKMP 策略（用于轮循）R1(config)#crypto isakmp policy 10 定义对称加密算法R1(config-isakmp)#encryption 3des 定义hash认证算法R1(config-isakmp)#hash md5 选择使用域共享密钥方式产生keyR1(config-isakmp)#authentication pre-share 定义非对称加密算法（为DH-2）R1(config-isakmp)#group 2 定义域共享密钥 key 值R1(config)#crypto isakmp key cisco address 12.1.1.2 定义IPSEC SA（使用ESP或AH方式加密认证）（ipsec）R1(config)#crypto ipsec transform-set ipsec esp-aes esp-sha-hmac 定义crypto map 定义名称R1(config)#crypto map ccie 10 ipsec-isakmp 指定某个对方IP地址生效R1(config-crypto-map)#set peer 12.1.1.2 定义转换集（ipsec）R1(config-crypto-map)#set transform-set ipsec 调用感兴趣流（ACL）R1(config-crypto-map)#match address 100 接口调用R1(config)#int f0/0R1(config-if)#crypto map ccie *Dec 24 15:34:08.483: %CRYPTO-6-ISAKMP_ON_OFF: ISAKMP is ON R2同理ping结果123456R1#ping 2.2.2.2 source 1.1.1.1Type escape sequence to abort.Sending 5, 100-byte ICMP Echos to 2.2.2.2, timeout is 2 seconds:Packet sent with a source address of 1.1.1.1 .!!!! 结果抓包]]></content>
      <categories>
        <category>CCNP</category>
      </categories>
      <tags>
        <tag>CCNP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[交换安全]]></title>
    <url>%2Fpost%2F54e8df91.html</url>
    <content type="text"><![CDATA[不是不做，时候未到。 交换安全MAC地址攻击概念：攻击者不断修改自己的MAC地址，交换机进行大量学 习，导致交换机mac地址表缓存溢出，不能再学习其他的Mac地址信息， 此时交换机将工作在hub状态 解决方案：1.静态MAC地址写入静态MAC地址写书：sw1(config)#mac address-table static 000a.000b.000c vlan 1 interface ethernet 2/0查看： sw1#sho mac address-table static结果： Mac Address Table ------------------------------------------- Vlan Mac Address Type Ports ---- ----------- -------- ----- 1 000a.000b.000c STATIC Et2/0 Total Mac Addresses for this criterion: 1 2.基于MAC地址过滤sw1(config)#mac address-table static 00a.00b.00c vlan 1 drop3.端口安全设置接口接收的MAC地址数量以及接收授权Mac地址默认启用了端口安全之后，接收MAC地址数据只有1个，授权学习到的第一个MAC地址. 开启端口安全sw1(config-if)#switchport port-security 设置支持的MAC地址数量（默认为1）sw1(config-if)#switchport port-security maximum 1 指定授权的合法的MAC地址123sw1(config-if)#switchport port-security mac-address ?H.H.H 48 bit mac addresssticky Configure dynamic secure addresses as sticky sticky表示粘滞，把接口学习到的第一个mac地址粘滞成一条命令结果 sw1#sho run int e2/0 Building configuration... Current configuration : 197 bytes ! interface Ethernet0/0 switchport mode access switchport port-security switchport port-security mac-address sticky switchport port-security mac-address sticky 0203.e900.0200 duplex auto end 选择触发端口安全惩罚方式若触发了端口安全： 1.shutdown（默认） 2.protect（保护） 3.restrict（限制） sw1(config-if)#switchport port-security violation ? protect Security violation protect mode restrict Security violation restrict mode shutdown Security violation shutdown mode 默认：由于触发了端口安全，导致接口error-disable （shutdown），不能自动恢复，保护和限制都会丢弃未授权mac地址的数据帧 查看接口授权MAC地址 sw1#sho port-security address Secure Mac Address Table ------------------------------------------------------------------- Vlan Mac Address Type Ports Remaining Age (mins) ---- ----------- ---- ----- ------------- 1 0203.e900.0500 SecureSticky Et2/0 - ------------------------------------------------------------------- Total Addresses in System (excluding one mac per port) : 0 Max Addresses limit in System (excluding one mac per port) : 4096 默认模式由于触发了端口安全，导致接口error-disable （shutdown），不能自动恢复，则有两种启用方式:1.shutdown接口 no shutdown2.开启err-disable针对端口安全导致的自动恢复sw1(config)#errdisable recovery cause psecure-violation设置恢复间隔（默认自动恢复300s）sw1(config)#errdisable recovery interval 30查看（部分） sw1#sho errdisable recovery Recovery Status Timer Status --------------- ------------ psecure-violation Enabled Timer interval: 30 seconds 查看 sw1#sho port-security Secure Port MaxSecureAddr CurrentAddr SecurityViolation Security Action (Count) (Count) (Count) --------------------------------------------------------------------------- Et2/0 1 1 0 Shutdown --------------------------------------------------------------------------- Total Addresses in System (excluding one mac per port) : 0 Max Addresses limit in System (excluding one mac per port) : 4096 VLAN 间攻击概念：默认交换机接口模式为auto或desirable ，主机模拟交换机发 送DTP协商帧，建立trunk链路。 学习交换网络中的某些重要信息，发送 VTP/BPDU等信息干涉交换网络工作 解决方案：将连接用户的接口设置为 access 接口sw1(config-if)#switchport mode access在trunk 链路中针对Native 打标记.sw1(config)#vlan dot1q tag native 私有VLANPrivate VLAN ：私有Primary VLAN ：主VLAN（可以有n个辅助VLAN）Secondary VLAN ：辅助VLAN 辅助VLAN分为两种：1.团体VLAN 2.孤立VLAN主VLAN可以与辅助VLAN通信，辅助VLAN之间不能通信，孤立VLAN之间不能通信，团体VLAN内的用户可以通信主VLAN ： 混杂接口团体VLAN ：团体主机接口孤立VLAN：孤立主机接口配置时团体和孤立VLAN的接口统一为主机接口使用私有VLAN ， VTP模式必须为透明模式。配置设置为透明模式sw1(config)#vtp mode transparent创建两个辅助VLAN501为团体VLAN，502为孤立VLANsw1(config)#vlan 501sw1(config-vlan)#private-vlan communitysw1(config-vlan)#exisw1(config)#vlan 502sw1(config-vlan)#private-vlan isolatedsw1(config-vlan)#exi创建VLAN100为主VLANsw1(config)#vlan 100sw1(config-vlan)#private-vlan primary将VLAN501和502关联到主VLAN100sw1(config-vlan)#private-vlan association 501-502将接口划入主VLAN1.定义接口为混杂接口sw1(config)#int e2/1sw1(config-if)#switchport mode private-vlan promiscuous2.接口划入VLANsw1(config-if)#switchport private-vlan mapping 100 501-502将接口划入辅助VLAN5011.定义接口为主机接口sw1(config)#int range ethernet 2/2-3sw1(config-if-range)#switchport mode private-vlan host2.接口划入VLANsw1(config-if-range)#switchport private-vlan host-association 100 501将接口划入辅助VLAN5021.定义接口为主机接口sw1(config)#int range ethernet 2/4-5sw1(config-if-range)#switchport mode private-vlan host2.接口划入VLANsw1(config-if-range)#switchport private-vlan host-association 100 502查看： sw1#sho vlan private-vlan Primary Secondary Type Ports ------- --------- ----------------- ------------------------------------------ 100 501 community Et2/1, Et2/2, Et2/3 100 502 isolated Et2/1, Et2/4, Et2/5 DHCP 欺骗攻击概念：DHCP 欺骗攻击（spoofing），攻击者模拟为DHCP服务器，下发不正确的IP地址和网关现象： R3(config-if)#do sho ip int b Interface IP-Address OK? Method Status Protocol Ethernet0/0 20.1.1.2 YES DHCP up up 接口重新shutdown no shutdown之后 重新获取地址 R3(config-if)#do sho ip int b Interface IP-Address OK? Method Status Protocol Ethernet0/0 10.1.1.2 YES DHCP up up 解决方案：DHCP snooping 信任接口：接收offer ack（由服务器发送） 转发discover request（由主机发送）非信任接口：接收discover request （由主机发送） 转发 offer ack（由服务器发送） 将连接DHCP server接口设置为信任端口，其他为非信任接口。将交换机设置为路由器信任的中继代理。部署：开启DHCP snoopingSW1(config)#ip dhcp snooping针对某些VLAN开启snoopingSW1(config)#ip dhcp snooping vlan 1设置接口为信任接口SW1(config)#int e2/1SW1(config-if)#ip dhcp snooping trust在DHCP sever上开启针对DHCP中继信息信任R1(config)#ip dhcp relay information trust-all查看 SW1#sho ip dhcp snooping binding MacAddress IpAddress Lease(sec) Type VLAN Interface ------------------ --------------- ---------- ------------- ---- ------------ 000a.0000b.000c 10.1.1.2 86342 dhcp-snooping 1 Ethernet2/1 Total number of bindings: 1 由于二层交换机解析高层（dhcp使用udp协议，应用层）性能较弱，攻击者会向交换机发送高频率的discovery报文，导致交换机瘫痪解决办法：定义非信任接口接收dhcp消息包的频率SW1(config)#int range e2/2-3SW1(config-if-range)#ip dhcp snooping limit rate 2若超过此速率，会导致接口error-disable （shutdown） ARP欺骗攻击概念：主机发送大量IP地址变化的无故ARP，使网段中所有主机学习大量IP地址 的ARP映射都为攻击者，导致网络瘫痪 解决方案：1.静态ARP映射（临时解决方案）2.DAI（Dynamic ARP Intercept 动态ARP截取 ）必须依赖DHCP snooping 中所产生DHCP Snooping binding表.若攻击者的IP地址和DHCP Snooping binding表中mac地址所对应的IP地址不一致，则shutdown该接口部署：全局启用ARP截取SW1(config)#ip arp inspection vlan 1连接网关、server 等设备设置为信任接口SW1(config)#int e2/1SW1(config-if)#ip arp inspection trust]]></content>
      <categories>
        <category>CCNP</category>
      </categories>
      <tags>
        <tag>CCNP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spanning Tree 增强]]></title>
    <url>%2Fpost%2F9029880a.html</url>
    <content type="text"><![CDATA[不是不做，时候未到。 Spanning Tree 增强portfast 端口加速 针对交换机的access接口，连接的是终端用户例如router、PC、server 等等，这些不需要运行生成树的接口。 接口默认进入listening状态，等待 30s才能进入转发状态. 位置：接入层交换机的access 接口 做完之后节约时间：30s 配置sw1(config)#int range ethernet 2/0-1sw1(config-if-range)#spanning-tree portfast提示： %Warning: portfast should only be enabled on ports connected to a single host. Connecting hubs, concentrators, switches, bridges, etc... to this interface when portfast is enabled, can cause temporary bridging loops. Use with CAUTION %Portfast will be configured in 2 interfaces due to the range command but will only have effect when the interfaces are in a non-trunking mode. 注意：不同型号的交换机命令稍有不同 全局启用：sw1(config)#spanning-tree portfast edge default 在某些接口上关闭portfastsw1(config)#int e0/1sw1(config-if)#spanning-tree portfast disable 在trunk接口启用portfast（默认情况下，接口一旦收到BPDU，portfast 失效）sw1(config)#int e0/1sw1(config-if)#spanning-tree portfast edge trunk uplinkfast 上行链路加速 若上行链路发送故障，阻塞端口进入listening 状态，默认等待30s进 入forwarding 位置：所有的接入层交换机上 节约时间30s 配置首先将sw1，sw2，sw3上的e0/0-3，e1/0-1关闭，然后打开sw1上的e0/0，e0/2，sw2上的e0/0，e1/0，sw3上的e0/2，e1/0则sw1为根网桥，sw1接口全为制定端口，sw2上e0/0为根端口，e1/0为指定端口，sw3上e0/2为根端口，e1/0为阻塞端口结果 sw1 Interface Role Sts Cost Prio.Nbr Type ------------------- ---- --- --------- -------- -------------------------------- Et0/0 Desg FWD 100 128.1 Shr Et0/2 Desg FWD 100 128.3 Shr sw2 Interface Role Sts Cost Prio.Nbr Type ------------------- ---- --- --------- -------- -------------------------------- Et0/0 Root FWD 100 128.1 Shr Et1/0 Desg FWD 100 128.33 Shr sw3 Interface Role Sts Cost Prio.Nbr Type ------------------- ---- --- --------- -------- -------------------------------- Et0/2 Root FWD 100 128.3 Shr Et1/0 Altn BLK 100 128.33 Shr 打开sw3的debugsw3#debug spanning-tree events Spanning Tree event debugging is on 关闭sw3上e0/2，即down掉sw3到sw1的上行链路sw3(config)#int e0/2sw3(config-if)#shu 结果：可以看到e1/0端口立即进入listening状态，随即15秒后进入learning，再15秒进入forwarding，即e1/0阻塞端口成为根端口转发数据，整个过程用了30s sw3(config-if)# *Nov 24 22:16:35.014: STP: VLAN0001 new root port Et1/0, cost 200 *Nov 24 22:16:35.014: STP: VLAN0001 Et1/0 -&gt; listening *Nov 24 22:16:35.014: STP[1]: Generating TC trap for port Ethernet0/2 sw3(config-if)# *Nov 24 22:16:37.018: %LINK-5-CHANGED: Interface Ethernet0/2, changed state to administratively down sw3(config-if)# *Nov 24 22:16:37.018: STP: VLAN0001 sent Topology Change Notice on Et1/0 *Nov 24 22:16:38.026: %LINEPROTO-5-UPDOWN: Line protocol on Interface Ethernet0/2, changed state to down sw3(config-if)# *Nov 24 22:16:50.018: STP: VLAN0001 Et1/0 -&gt; learning sw3(config-if)# *Nov 24 22:17:05.018: STP[1]: Generating TC trap for port Ethernet1/0 *Nov 24 22:17:05.018: STP: VLAN0001 sent Topology Change Notice on Et1/0 *Nov 24 22:17:05.018: STP: VLAN0001 Et1/0 -&gt; forwarding 打开e0/2端口然后做uplinkfastsw3(config)#spanning-tree uplinkfast 变化：意思他要离根网桥远一点，一般最底层的接入层交换机才做 显示 Uplinkfast enabled 优先级变为 priority 49152 32768+4*4096=49152 cost值增加3000 再次关闭e0/2端口结果 *Nov 24 23:04:45.790: %SPANTREE_FAST-7-PORT_FWD_UPLINK: VLAN0001 Ethernet1/0 moved to Forwarding (UplinkFast). 表示e1/0口直接成为根端口转发数据 Interface Role Sts Cost Prio.Nbr Type ------------------- ---- --- --------- -------- -------------------------------- Et1/0 Root FWD 3100 128.33 Shr 全局模式Spanning tree uplinkfast rata-limit 100 （单位数据包每秒）开始sw3上的e1/0接口是阻塞的，通过e0/2接口学习mac地址转发数据，若e0/2 down掉，则e1/0成为根端口转发数据，此时sw2上则需要学习sw3上大量的mac地址，为了做好切换过程，做了全局uplinkfast后，在e0/2未down之前会通过e1/0阻塞端口向上发送伪包，为了让sw2学习sw3上的mac地址，则若e0/2 down掉，e1/0成为根端口后可以直接转发数据。 backbonefast 骨干加速 若骨干链路发生故障，下行链路经过50s进入forwarding状态； 启用backbonefast特性，若收到次级BPDU，通过根端口向根网桥发送 RIQ查询（询问优质根是否正常），若正常由根网桥返回RIQ应答，描 述根正常，则blocking接口进入listening状态，经过30s进入forwarding. 部署位置：所有交换机 节约时间：20s 启用backbonefast特性重新打开sw3的e0/2接口，则e0/2重新成为根端口，e1/0为阻塞端口若down掉sw1连接sw2的骨干链路（关闭sw2的e0/0），则sw3的e1/0接口成为指定端口，sw2的e1/0成为根端口，这个过程中sw3的e1/0接口成为指定端口需要经过50s sw3(config-if)# *Nov 24 23:35:02.798: STP: VLAN0001 heard root 28673-0203.e900.0200 on Et1/0 sw3(config-if)# *Nov 24 23:35:03.966: STP: VLAN0001 Et1/0 -&gt; listening *Nov 24 23:35:04.798: STP: VLAN0001 heard root 28673-0203.e900.0200 on Et1/0 *Nov 24 23:35:04.798: STP: VLAN0001 Topology Change rcvd on Et1/0 *Nov 24 23:35:04.798: STP: VLAN0001 sent Topology Change Notice on Et0/2 sw3(config-if)# *Nov 24 23:35:18.974: STP: VLAN0001 Et1/0 -&gt; learning sw3(config-if)# *Nov 24 23:35:33.974: STP[1]: Generating TC trap for port Ethernet1/0 *Nov 24 23:35:33.974: STP: VLAN0001 sent Topology Change Notice on Et0/2 *Nov 24 23:35:33.974: STP: VLAN0001 Et1/0 -&gt; forwarding *Nov 24 23:35:33.974: stp_state_change_completed: Et1/0. new state = FWD 详解：骨干链路断开后，sw2不能收到sw1的BPDU，所以sw2就以为自己是根网桥，则sw2会向sw3发送BPDU（此BPDU与之前向sw3发送的不一样，之前发送的rid是sw1，bid是sw2自己，现在发送的rid和bid都是sw2自己），此时sw3通过sw1收到的BPDU，rid要优于sw2发送的（称sw2的为次级BPDU），故sw3会忽略sw2发送的BPDU，但sw3的阻塞端口e1/0会一直监听sw2发来的BPDU，之前一直收到的是来自于根网桥的BPDU，现在不能收到来自于根网桥的BPDU了，超时时间20s，则sw3的e1/0端口会进入listening状态，告诉sw2根网桥还活着（向sw2发送优质BPDU），直到进入forwarding，整个过程需要50s backbonefast建议在所有交换机都做骨干链路断开之后，sw2会向sw3发送次级BPDU，sw3会忽略，做了backbonefast后，收到次级BPDU后，sw3会主动向根网桥发送根链路查询请求报文（RLQ request） ，根网桥会回复根链路查询响应报文（RLQ response），sw3知道sw2收不到根网桥发送的BPDU，以为自己是根网桥了，所以sw3的e1/0接口直接进入listening状态，告诉sw2根网桥还活着（向sw2发送优质BPDU），直到进入forwarding，整个过程需要30s，节约了20s。重新打开sw2的e0/0端口配置sw1(config)#spanning-tree backbonefastsw2(config)#spanning-tree backbonefastsw3(config)#spanning-tree backbonefast关闭sw2的e0/0端口结果 sw3(config)# *Nov 25 00:07:22.998: STP: VLAN0001 heard root 28673-0203.e900.0200 on Et1/0 *Nov 25 00:07:22.998: STP: VLAN0001 Et1/0 -&gt; listening 可知sw3的e1/0端口立即进入listening状态。 根端口：root port RP指定端口：DP阻塞端口：NDP]]></content>
      <categories>
        <category>CCNP</category>
      </categories>
      <tags>
        <tag>CCNP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++复习重点]]></title>
    <url>%2Fpost%2F8b042bec.html</url>
    <content type="text"><![CDATA[不是不做，时候未到。 C++重点 函数重载必须有不同的形参列表 析构函数可以是虚函数 具有纯虚函数的类不能创建类对象 静态数据成员是类的所有对象共享的数据 将一组对象的共同特征抽象出形成类 friend void B::fun(); //B的成员函数fun()说明为A的友元函数 如果一个引用不是用作函数参数或返回值，则在说明该引用时必须进行 初始化 const double pi = 3.141592653589793 ; int operator++(int x); // ++运算符重载 动态联编通过基类指针或引用调用虚函数完成 构造函数访问权限是公有的 基类对象的地址不能赋给派生类 创建对象时 test(2); 表示创建一个对象并赋值2 test[2]; 表示创建两个对象，并且值为默认值 main函数执行完毕之后才执行析构函数，每个对象析构一次 创建对象时，类a被调用一次，执行类a里的函数时，类a又被调用一次 c继承b，c类内对a赋值，创建c类对象时 先调用类b，再调用类a，最后调用c类本身。 在函数模板的参数中，用class修饰的参数称为虚拟类型参数 以面向对象方法构造的系统，其基本单位是对象 对象是类的一个实列 对象将其大部分细节隐藏起来，这种机制称为封装 复杂对象可以由简单对象构成，称为聚合 C++支持编译时的多态性和运行时的多态性 C++中，编译时的多态性是通过重载实现，运行时的多态性通过虚函数实现 三个阶段：分析，设计，实现 若在类的定义体中给出了一个成员函数的完整定义，则该函数属于内联函数 把一个类的定义体和所有成员函数的定义体所构成的程序范围叫做该类的作用域 对类中对象成员的初始化是通过在构造函数中给出的初始化表实现的，也可以通过构造函数中的函数体实现 对类中对象成员和常量成员和引用成员的初始化是通过构造函数给出的初始化表实现的 AB为一个类， AB(AB&amp; x); 为类AB的拷贝构造函数 重载运算符时，该运算符的优先级，结合性，操作符的个数不允许改变，不能创建没有的运算符 单目运算符作为类的成员函数重载时有0个参数，独立函数重载时有1个参数。双目运算符作为类的成员函数重载时有1个参数，独立函数重载时有2个参数。赋值运算符不能被派生类继承 虚基类是为了消除二义性 在每个成员函数中，隐含的第一个参数的参数名为this 隐含的第一个参数类型为 类名* 保证一个公共的基类在派生类中只产生一个基类子对象，则必须都以虚基类的方式直接继承它。 B类继承A类，用B类创建对象后，先析构B类，在析构A类 用户可以重新定义标准库函数，若如此，该函数将失去原有含义 引用调用是 形参是引用，实参是变量 函数调用不可以作为一个函数的形参 成员函数重载是为了使用方便，提高可读性和灵活性 void *为无类型指针，能够指向不论什么数据类型，可以用随意数据类型的指针对void指针赋值 面向对象方法的多态性是指针对一消息，不同的对象可以以适合自身的方式加以响应 OOA：面向对象分析（analysis） OOD：面向对象设计（design） 类中定义的成员默认为private访问属性，结构中定义的成员默认为public访问属性 一个类的静态数据成员所表示属性只是类的属性 静态成员函数只允许操作静态成员变量，不允许操作非静态成员变量 静态数据成员的初始化是在全局区中进行的 类A是类B的友元类，类A的所有成员函数都可以访问类B的所有成员。 一个类的友元不是该类的成员，但与该类的关系密切，所以他没有this指针，也就没有默认操作的对象 a++中的++是作为普通函数重载的运算符，则调用格式可以是operator++(a,1)++a中的++是作为成员函数重载的运算符，则调用格式可以是a.operator++()]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spanning Tree]]></title>
    <url>%2Fpost%2Fa3fe09f4.html</url>
    <content type="text"><![CDATA[不是不做，时候未到。 Spanning Tree 生成树目的：交换机之间存在冗余（备份）路径，以及交换机的泛洪机制，导致交换机之间产生 二层交换环路。 造成影响：1.广播风暴（数据在两个或多个交换机之间大量重复传递）2.MAC地址表不稳定 （交换机会将某个主机的mac地址重复删除和学习）3.数据帧的重复拷贝（由于ARP会泛洪和数据的重复传递，导致A主机发送的ARP会被交换机重复发送到B主机） 解决方案：逻辑性阻塞某个接口. 在交换机之间，通过发送比较信息，选择在环路之间应该被阻塞的接口. 生成树类型： 公有生成树：STP（又称为802.1D 标准生成树）RSTP（802.1W 快速生成树）MST（802.1S 多生成树） 私有生成树：PVST（基于VLAN的标准生成树，每一VLAN都有自己的一套生成树）PVRST+（基于VLAN的快速生成树） 发送比较信息BPDU—网桥协议数据单元配置BPDU：config-BPDU拓扑变更BPDU：TCN-BPDU Protocol ID：协议号，代表我是一个BPDU报文 Version：表示是哪一种BPDU（802.1D或者802.1W等） Message Type：表示是配置BPDU还是拓扑变更BPDU Flags：802.1D中描述是拓扑变更BPDU还是拓扑变更BPDU确认，占2Bit。802.1W和802.1S中，用于整个生成树的选举，占6Bit。 Root ID：根标识符 ，在一棵生成树中表示唯一根.使用最优质的BID表示，即根交换机的RID=BID。 Cost Of Path：也称为CoP值，路径开销，描述了本接口到达根的路径开销值之和，数值越小越优10G—–21G——–4100M—–1910M—–100默认根网桥上所有接口的COP值为0，经过不同的链路增加对应的cost Bridge ID ：网桥标识符，用于表示该交换机或网桥在交换网络中的唯一性构成：BID 优先级 + mac地址注意：PVST、PVRSTP+ 的构成 ：BID优先级+VLAN ID+mac地址MST 的构成 ：BID优先级+ instance ID + mac地址 BID优先级：默认值为32768，数值范围0-65535（BID优先级数值必须为4096的倍数， 范围也可称为0-61440）,再使用BID优先级时，数值越小越优. Mac 地址：本交换机上背板地址池中最小的MAC地址，mac地址越小越优 Port ID ：端口标识符，用于表示本交换机上接口的唯一性标识构成： PID优先级+port number PID优先级：默认为128，数值范围0-255（PID优先级必须为16的倍数，所有范围 0-240）,数值越小越优 Port number：端口号，表示了本交换机该接口的唯一性，一般为接口的端口号标 识，数值越小越优. Message age ：消息时间，也称消息的老化时间，实际上等于MAC地址老化时间， 默认300s，即300s不发任何数据就删掉此mac地址，在启用portfast等特性时变为15s Max age ：最大等待时间，默认20s，hello数据包的超时时间以及从blocking进入 listening 状态等待时间 Hellotime ：默认2s，配置BPDU的发送间隔 Forward delay ：转发延时，默认15s ，在生成树中状态切换间隔Listening进入learning进入forwarding 时间隔 交换网络中交换机的角色以及端口状态切换交换机角色：分为根网桥和非根网桥端口角色：根端口、指定端口、非指定端口（阻塞端口）端口状态切换： Blocking ：阻塞状态，不能发送BPDU，接收BPDU，不能发送和接收数据，被动等待 20s进入下一状态 Listening ：监听状态，可以发送和接收BPDU，不能发送和接收数据，进行STP选举， 被动等待一个 forward delay 15s进入下一状态 Learning ：学习状态，可以发送和接收BPDU，不能发送和接收数据，可以学习BPDU 中的源MAC地址（MAC地 址学习状态），被动等待一个forward delay 15s进入下一 状态，生成树的选举在此过程中完成。 Forwarding ：转发状态，可以发送、接收BPDU和数据，mac地址学习和生成树接口 状态切换完成 生成树选举选举顺序：根网桥-&gt;根端口-&gt;指定端口-&gt;非指定端口(阻塞端口)根网桥选举：具有最优BID的交换机为根网桥 根端口：用于接收来自根的BPDU信息，只能存在于非跟网桥之上，并且一个交换机 只能存在一个. 根端口选举1.最小COP值2.发送方最小的BID3.发送方的PID 指定端口：用于发送或转发BPDU信息，存在于每条链路中，一条只能存在一个指定 端口，根网桥的所有接口全为指定端口 指定端口选举1.接口所属交换机上根端口到达根网桥的COP值2.本交换机BID3.本地的PID阻塞端口逻辑上打破接口. 选举详细过程根网桥选举 这里假设sw1 BID优先级最高（bid优先级以此类推），故sw1为根网桥根端口选举 SW1：无根端口 SW2：1.最小cop（接口1和2）相同2.发送方都为根网桥，bid相同3.根网桥接口5的pid小，故选出根端口为接口1 SW3：1.最小cop（接口1和2）相同2.发送方都为根网桥，bid相同3.根网桥接口1的pid小，故选出根端口为接口1 SW4：1.最小cop（接口1和2）相同2.发送方都为根网桥，bid相同3.根网桥接口3的pid小，故选出根端口为接口1 SW5：1.最小cop（接口1和2）相同2.发送方sw3的bid小于sw4的bid，故选出根端口为接口1 SW6：1.最小cop（接口1和2）相同2.发送方sw3的bid小于sw4的bid，故选出根端口为接口1 根端口选举结果如图 指定端口选举 SW1：所有接口都为指定端口 SW2：接口2一定为阻塞端口1.接口3和4与sw2相比， cop相同，接口5与6和sw4相比，cop相同2.本交换机BID优于sw3和sw4，故接口3，4，5，6为指定端口 SW3：sw5和sw6有唯一的根端口，故接口7和8一定为指定端口，接口2，3，4一定为阻塞端口1.接口5和6与sw4相比cop相同2.本交换机BID优于sw4，故接口5和6为指定端口 SW4：接口2，3，4一定为阻塞端口1.接口7与sw5相比，cop小于sw5，故接口7为指定端口接口8与sw6相比，cop小于sw6，故接口8为指定端口 SW5：接口2为阻塞端口 SW6：接口2为阻塞端口 指定端口选举第三条的特殊情况假设sw1和sw2的cop相同，sw2的bid优，但sw2的接口1和2不能同时成为指定端口，否则会出环，所以比第三条接口pid，由于sw2的接口1的pid小于接口2的pid，故接口1成为指定端口生成树拓扑结构变化由发生改变的交换机的根端口向根网桥发送拓扑变更BPDU，根网桥收到后以自己为根重新收敛，之后在向之前发送拓扑变更BPDU的根端口发送拓扑变更BPDU确认 生成树的控制 根网桥的控制设置BID优先级，默认为32768，修改sw2的bid为32768-4096=28672sw2(config)#spanning-tree vlan 1 priority 28672This bridge is the root设置主根和备份根，设置sw1为主根，sw2为备份根sw1(config)#spanning-tree vlan 1 root primarysw2(config)#spanning-tree vlan 1 root secondary主根的优先级变为32768-2*4096=24576Bridge ID Priority 24577 (priority 24576 sys-id-ext 1)备份根的优先级变为32768-4096=28672Bridge ID Priority 28673 (priority 28672 sys-id-ext 1) 控制根端口的位置修改链路cost值：修改sw2的cost为120sw2(config-if)#spanning-tree vlan 1 cost 120修改前Et0/0 Root FWD 100 128.1 ShrEt0/1 Altn BLK 100 128.2 Shr修改后Et0/0 Altn BLK 120 128.1 ShrEt0/1 Root LIS 100 128.2 Shr修改发送方BID：与上述修改根网桥之修改BID优先级方法一致修改发送方PID：修改sw1的e0/2接口pid为192sw1(config-if)#spanning-tree vlan 1 port-priority 192修改之后sw1Et0/2 Desg FWD 100 192.3 Shr修改之前sw3Et0/2 Root FWD 100 128.3 ShrEt0/3 Altn BLK 100 128.4 Shr修改之后sw3Et0/2 Altn BLK 100 128.3 ShrEt0/3 Root LIS 100 128.4 Shr 802.1D生成树优缺点优点：树少、简单、缺点：生成树收敛速度慢（默认共计收敛时间50s），基于计时器收敛、不能进行负 载分担 PVST优缺点优点：简单、支持负载分担缺点：生成树收敛速度慢，生成树数量较多. 解决办法：1.使用spanning tree 的增强特性 portfast、backbonefast 、uplinkfast2.使用RSTP或MST]]></content>
      <categories>
        <category>CCNP</category>
      </categories>
      <tags>
        <tag>CCNP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信透明头像]]></title>
    <url>%2Fpost%2F1e20b564.html</url>
    <content type="text"><![CDATA[不是不做，时候未到。 先来一张效果图 教程开始素材的准备和PhotoShop软件这里我以滑稽表情为例 用PS打开滑稽表情 按住Shift+Ctrl+N新建图层 抠图 抠图完成后按Ctrl+X 然后删除这个图层 按Ctrl+V粘贴到第二部新建的图层中然后选中这个图层 按Ctrl+T进行缩放 缩放成如图所示的大小 保存为png格式 复制到手机上（复制原文件）在手机微信上更换图像这里需要注意的是 要把图像缩放到合适的大小手动滑稽~…~]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为MIUI添加人脸解锁]]></title>
    <url>%2Fpost%2F5ea5d52e.html</url>
    <content type="text"><![CDATA[不是不做，时候未到。 玩腻了指纹解锁，试试看人脸识别吧，FaceID For MIUI9_MI5解Bootloader锁解Bootloader锁教程:点这里 刷第三方Recovery小米5专用RecoveryBY~XM大佬的rec本人一直用的这个rec 支持OTA增量更新 进入rec法一：开机按电源键+音量键上 直到mi标出现放开电源键法二：系统更新界面-右上角三个小圆点-重启到恢复模式（Recovery） 刷入卡刷包请注意此卡刷包只适用于官方稳定版或开发版FaceID For MIUI9_Mi5.zip密码：6666 重启大功告成不刷第三方rec的方法还是解Bootloader锁解Bootloader锁教程:点这里 下载资源下载软件里边有所有的资源小米五人脸解锁提取+工具.zip密码：6666 安装两个APPRE文件管理器，syslock（用来解system锁） 获取root权限并赋予权限1.开发版直接在安全中心开启root权限2.给这两个APP赋予root权限3.使用syslock解锁system（需要重启） 至此获取了完整的root权限 替换文件1.用《需要替换的app》中的两个apk文件替换 /system/priv-app/settings 和 /system/priv-app/MiuiKeygard 中的两个 App.2.用《需要替换的文件》中的五个文件替换 system/lib64 目录下的五个 so 文件（直接复制进去） Reboot 大功告成！小米五，红米note4.MIX.5s.5sp.部分6.部分红米.5x暂时都可以使用，理论支持miui9所有稳定版，开发板，体验版。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义QQ动态图像的教程]]></title>
    <url>%2Fpost%2F3ffe6d5a.html</url>
    <content type="text"><![CDATA[不是不做，时候未到。 自定义QQ动态图像可以先看一下我的QQ头像。点击加我为好友其实很简单，就是一个替换文件的操作。 把要设置的视频【MP4格式，10秒之内，文件尽量不要太大】粘贴到（DCIM）里面的（Camera）文件夹里，切记不要退出。 切换到QQ，点开头像拍摄动态头像，这一点要记住拍完视频不要点完成。 切换到文件管理，你会发现这个文件夹里多了一个视频，你把这个多出来的视频文件名复制一下，并且删除这个视频。 然后找到你刚才剪切粘贴的那个视频，把文件名字替换了，切换QQ点完成就可以了。是不是很简单呢，如果没明白的话，去我的QQ空间有视屏教程。tips：进空间使劲往下拉。 使用Ctrl+D收藏本站 不是不做，时候未到。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
